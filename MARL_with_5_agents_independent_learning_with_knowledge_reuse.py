###########################################################################################################
## This code is an example for Multi-Agent Reinforcement learning.  Four agents persuits                 ##
## Coder/Author: Daming Shi                                                                              ##
## Email: shidm18@mails.tsinghua.edu.cn /Damienshi@163.com                                               ##
## Address: ROOM 601A, Central Builing, Tsinghua University, Beijing, CHINA.                             ##
###########################################################################################################
import tensorflow as tf
import numpy as np
from collections import deque
import math
import random
import os
os.environ['CUDA_VISIBLE_DEVICES']='2'
#创建了5个agent，读取了4个agent的网络，前4个网络能看见第5个agent
EPISODE = 20001#1000
STEP = 50 # 9 steps make a product economicly, so set TARGET_OUTPUT=100 as goal
BATCH_SIZE = 32
INIT_EPSILON = 1.0
FINAL_EPSILON = 0.0
REPLAY_SIZE = 500000
TRAIN_START_SIZE = 200
GAMMA = 1
TARGET_OUTPUT=20
AgentNUM = 5
mean_best=50

def get_weights(shape):
# get wwights of network
    weights = tf.truncated_normal( shape = shape, stddev= 0.01 )
    return tf.Variable(weights)

def get_bias(shape):
# get bias of network 
    bias = tf.constant( 0.01, shape = shape )
    return tf.Variable(bias)
class DQN():
# Deep Q-learning Network, the agent of scheduling, which contains a network for value function.
    def __init__(self, model_dir=None, optimizer_dir=None):
    # inialize the size of network
        self.epsilon_step = ( INIT_EPSILON - FINAL_EPSILON ) / 15000
        self.action_dim = 5
        #print( env.observation_space )
        
        #multi-agent 对于不同agent的网络输入不一样，修改dqn的输入参数
        self.state_dim = 25
        
        self.neuron_num = 2000
        self.replay_buffer = deque()
        self.epsilon = INIT_EPSILON
        self.graph = tf.Graph()
        self.sess = tf.InteractiveSession(graph=self.graph)
        self.init_network()
        self.saver = tf.compat.v1.train.Saver(max_to_keep=1)
        #self.sess.run( tf.initialize_all_variables() )
        self.sess.run( tf.global_variables_initializer() )
        self.model_dir = model_dir
        self.optimizer_dir = optimizer_dir

    def init_network(self):
    # inialize the structure of network and the optimizer
        self.input_layer = tf.placeholder( tf.float32, [ None, self.state_dim ] )
        self.action_input = tf.placeholder( tf.float32, [None, self.action_dim] )
        self.y_input = tf.placeholder( tf.float32, [None] )
        
        w1 = get_weights( [self.state_dim, self.neuron_num] )
        b1 = get_bias([self.neuron_num])
        hidden_layer = tf.nn.relu( tf.matmul( self.input_layer, w1 ) + b1 )

        w2 = get_weights( [self.neuron_num, self.neuron_num] )
        b2 = get_bias([self.neuron_num])
        hidden_layer2 = tf.nn.relu( tf.matmul( hidden_layer, w2 ) + b2 )

        w3 = get_weights( [ self.neuron_num, self.action_dim ] )
        b3 = get_bias( [ self.action_dim ] )
        self.Q_value = tf.matmul( hidden_layer2, w3 ) + b3
        
        value = tf.reduce_sum( tf.multiply( self.Q_value, self.action_input ), reduction_indices = 1 )
        self.cost = tf.reduce_mean( tf.square( value - self.y_input ) )
        self.optimizer = tf.train.RMSPropOptimizer(0.00025,0.99,0.0,1e-6).minimize(self.cost)

        return

    def percieve(self, state, action, reward, next_state, done):
    # input an experience, add all experiences into replay_buffer
        one_hot_action = np.zeros( [ self.action_dim ] )
        one_hot_action[ action ] = 1
        
        self.replay_buffer.append( [ state, one_hot_action, reward, next_state, done ] )
        '''
        if reward>0:
            for i in range (0,99):
                self.replay_buffer.append( [ state, one_hot_action, reward, next_state, done ] )
        '''
        if len( self.replay_buffer ) > REPLAY_SIZE:
            self.replay_buffer.popleft()
        if len( self.replay_buffer ) > TRAIN_START_SIZE:
            self.train()

    def train(self):
    # sample experiences from replay_buffer to train the network(value function)
        mini_batch = random.sample( self.replay_buffer, BATCH_SIZE )
        state_batch = [data[0] for data in mini_batch]
        action_batch = [data[1] for data in mini_batch]
        reward_batch = [ data[2] for data in mini_batch ]
        next_state_batch = [ data[3] for data in mini_batch ]
        done_batch = [ data[4] for data in mini_batch ]

        y_batch = []

        next_state_reward = self.Q_value.eval(session=self.sess, feed_dict = { self.input_layer : next_state_batch } )


        for i in range( BATCH_SIZE ):
            if done_batch[ i ]:
                y_batch.append( reward_batch[ i ] )
            else:
                y_batch.append( reward_batch[ i ] + GAMMA * np.max( next_state_reward[i] ) )

        self.optimizer.run(
            session=self.sess,
            feed_dict = {
                self.input_layer:state_batch,
                self.action_input:action_batch,
                self.y_input:y_batch
            }
        )

        #self.saver.save(self.sess, self.model_dir)
        #self.saver.save(self.optimizer, self.optimizer_dir)
        return

    def get_greedy_action(self, state):
    # get action based on current network(value fucntion) and state
        value = self.Q_value.eval(session = self.sess, feed_dict = { self.input_layer : [state] } )[ 0 ]
        return np.argmax( value )

    def get_action(self, state):
    # get action randomly, especially in the early time of reinforcement learning

        if random.random() < self.epsilon:
            return random.randint( 0, self.action_dim - 1 )
        else:
            return self.get_greedy_action(state)

    def model_load(self, path_to_ckpt_meta, path_to_ckpt_data):
        #####v1
        self.saver.restore(self.sess, self.model_dir)
        # self.saver.restore(self.sess, self.optimizer_dir)

        #####v2
        self.saver = tf.train.import_meta_graph(path_to_ckpt_meta) 
        saver.restore(self.sess, path_to_ckpt_data)

def get_action(state):
    # test with hand
    return int(input("choose action 0-4: "))
'''
def available(line_map, position, action):
# examine wwather the action is LIGAL for current state


 
    if action==1:
        offset=-8 #North
    elif action==2:
        offset=1   #East
    elif action==3:
        offset=8  #South
    elif action 4:
        offset=-1  #West

    #撞墙
    if line_map[position+offset] in '129':
        return False
    #推箱子
    if line_map[position+offset]=='7':
        if line_map[position+offset*2] in '1297':
            return False
        else:
            return True
    return True
'''
def map_inital():
    map=[]
    flag =True
    while flag:
        ll = np.random.randint(0, 5, AgentNUM*2).tolist()
        ll = ll+[2, 2] 
        flag = False
        for i in range(0,AgentNUM+1):
            for j in range(0,i):
                if ll[2*i]==ll[2*j] and ll[2*i+1]==ll[2*j+1]:
                    flag = True
    return ll
    


#done, action[i] = sto_run(exp_map, x[i], y[i])
def sto_run(map,x,y):
    choice = [0]
    if map[(x+4)%5][y]==0: #north
        choice.append(1)
    if map[x][(y+1)%5]==0: #east
        choice.append(2)
    if map[(x+1)%5][y]==0: #south
        choice.append(3)
    if map[x][(y+4)%5]==0: #west
        choice.append(4)  
    #return len(choice)==1, choice[np.random.randint(0,len(choice))]
    #return len(choice)==1, np.random.randint(0,5)
    return len(choice)==1, 0


def test_RL(agent,episode_now):
        #————Deep Q-Learning Iteration————
    global mean_best
    step_list=[]
    ans = [[3, 3, 4, 1, 4, 2, 0, 3, 0, 0, 2, 2], [2, 1, 4, 0, 3, 0, 1, 3, 2, 3, 2, 2], [3, 1, 3, 2, 4, 3, 4, 1, 2, 1, 2, 2], [1, 0, 4, 2, 4, 3, 0, 2, 4, 0, 2, 2], [2, 3, 4, 2, 1, 1, 2, 1, 4, 0, 2, 2], [3, 2, 3, 0, 4, 2, 3, 3, 0, 2, 2, 2], [3, 0, 1, 1, 4, 1, 2, 1, 0, 0, 2, 2], [2, 1, 3, 1, 3, 2, 0, 2, 0, 3, 2, 2], [2, 3, 3, 4, 3, 0, 4, 4, 2, 0, 2, 2], [0, 2, 2, 0, 2, 4, 0, 4, 3, 4, 2, 2], [0, 3, 0, 2, 4, 4, 2, 1, 1, 0, 2, 2], [3, 4, 4, 4, 3, 0, 2, 3, 3, 2, 2, 2], [0, 0, 1, 3, 2, 0, 1, 2, 0, 3, 2, 2], [1, 0, 1, 2, 0, 0, 0, 4, 3, 0, 2, 2], [2, 1, 2, 4, 1, 4, 2, 0, 1, 3, 2, 2], [2, 3, 4, 0, 3, 0, 2, 4, 0, 0, 2, 2], [4, 2, 2, 3, 3, 1, 4, 1, 3, 3, 2, 2], [0, 2, 2, 4, 2, 1, 4, 3, 0, 4, 2, 2], [0, 1, 2, 1, 4, 0, 3, 4, 0, 2, 2, 2], [2, 3, 1, 2, 3, 0, 1, 4, 0, 4, 2, 2], [3, 0, 2, 1, 4, 0, 4, 1, 1, 3, 2, 2], [3, 3, 3, 2, 1, 0, 3, 1, 0, 1, 2, 2], [0, 1, 2, 4, 1, 1, 0, 4, 0, 3, 2, 2], [1, 3, 3, 4, 4, 0, 1, 4, 3, 0, 2, 2], [4, 1, 3, 3, 2, 1, 0, 3, 4, 0, 2, 2], [3, 3, 1, 2, 0, 4, 3, 0, 1, 3, 2, 2], [3, 1, 1, 4, 3, 0, 0, 3, 0, 2, 2, 2], [3, 0, 2, 4, 3, 4, 4, 0, 0, 4, 2, 2], [3, 1, 1, 4, 0, 1, 1, 2, 4, 1, 2, 2], [1, 3, 2, 3, 4, 0, 2, 1, 3, 1, 2, 2], [1, 1, 4, 2, 4, 1, 3, 3, 4, 3, 2, 2], [4, 4, 1, 3, 3, 0, 2, 1, 3, 3, 2, 2], [3, 0, 4, 2, 3, 3, 0, 2, 3, 1, 2, 2], [2, 1, 3, 2, 4, 1, 0, 1, 1, 0, 2, 2], [1, 3, 1, 0, 0, 1, 3, 2, 2, 3, 2, 2], [3, 1, 0, 1, 2, 4, 0, 0, 3, 2, 2, 2], [1, 4, 3, 4, 0, 1, 1, 0, 3, 3, 2, 2], [4, 2, 4, 4, 1, 2, 1, 3, 3, 3, 2, 2], [4, 4, 0, 3, 4, 1, 1, 0, 1, 3, 2, 2], [1, 0, 4, 4, 4, 3, 1, 2, 1, 1, 2, 2], [4, 0, 4, 2, 1, 1, 1, 4, 3, 1, 2, 2], [1, 3, 4, 1, 1, 1, 4, 3, 0, 3, 2, 2], [1, 1, 0, 4, 1, 4, 0, 2, 3, 3, 2, 2], [2, 3, 1, 1, 0, 0, 1, 3, 1, 2, 2, 2], [0, 1, 4, 1, 3, 0, 1, 4, 0, 3, 2, 2], [1, 2, 3, 3, 3, 1, 3, 0, 4, 0, 2, 2], [4, 0, 0, 0, 1, 4, 4, 1, 4, 2, 2, 2], [1, 2, 4, 4, 1, 4, 3, 2, 1, 1, 2, 2], [3, 4, 4, 1, 3, 0, 4, 3, 2, 4, 2, 2], [0, 1, 3, 3, 4, 1, 3, 4, 2, 3, 2, 2], [2, 0, 3, 0, 4, 3, 0, 4, 2, 3, 2, 2], [0, 4, 3, 4, 4, 4, 1, 2, 4, 0, 2, 2], [3, 2, 1, 3, 3, 1, 2, 0, 4, 0, 2, 2], [4, 0, 1, 3, 1, 2, 0, 3, 4, 1, 2, 2], [1, 0, 1, 3, 4, 4, 0, 1, 1, 1, 2, 2], [0, 1, 2, 4, 4, 4, 1, 4, 4, 0, 2, 2], [0, 2, 1, 4, 4, 4, 3, 3, 1, 2, 2, 2], [4, 0, 1, 4, 2, 3, 4, 2, 1, 3, 2, 2], [1, 0, 3, 2, 1, 3, 4, 4, 1, 2, 2, 2], [2, 1, 4, 0, 3, 2, 1, 3, 1, 1, 2, 2], [3, 4, 1, 4, 1, 2, 1, 3, 3, 3, 2, 2], [0, 2, 4, 4, 0, 4, 1, 0, 3, 4, 2, 2], [0, 3, 2, 1, 0, 4, 3, 0, 0, 2, 2, 2], [0, 3, 3, 0, 4, 2, 2, 3, 1, 3, 2, 2], [3, 1, 3, 2, 4, 2, 4, 1, 2, 3, 2, 2], [1, 1, 3, 0, 3, 1, 0, 4, 4, 2, 2, 2], [3, 3, 2, 4, 1, 4, 4, 1, 0, 2, 2, 2], [1, 3, 4, 2, 4, 4, 2, 1, 0, 4, 2, 2], [4, 3, 1, 2, 0, 2, 0, 1, 4, 4, 2, 2], [0, 4, 4, 2, 3, 2, 4, 3, 0, 3, 2, 2], [3, 0, 0, 2, 0, 1, 4, 0, 2, 4, 2, 2], [2, 1, 2, 0, 1, 0, 4, 4, 0, 2, 2, 2], [4, 4, 2, 3, 1, 0, 4, 3, 2, 0, 2, 2], [2, 1, 0, 4, 3, 4, 2, 0, 1, 0, 2, 2], [2, 0, 3, 3, 0, 1, 0, 0, 1, 1, 2, 2], [4, 3, 0, 3, 4, 2, 0, 0, 4, 4, 2, 2], [4, 4, 4, 2, 0, 0, 1, 3, 3, 2, 2, 2], [1, 2, 1, 4, 0, 2, 2, 1, 4, 1, 2, 2], [0, 2, 3, 1, 1, 1, 3, 3, 4, 1, 2, 2], [0, 2, 3, 0, 3, 1, 1, 0, 3, 3, 2, 2], [2, 1, 2, 0, 4, 2, 2, 3, 3, 3, 2, 2], [4, 2, 2, 3, 2, 0, 0, 1, 1, 4, 2, 2], [4, 4, 4, 2, 4, 1, 1, 0, 2, 0, 2, 2], [3, 3, 1, 3, 3, 4, 4, 4, 1, 1, 2, 2], [3, 2, 1, 2, 2, 3, 2, 0, 1, 3, 2, 2], [0, 3, 4, 3, 4, 0, 0, 4, 3, 1, 2, 2], [1, 3, 3, 3, 3, 0, 2, 4, 4, 3, 2, 2], [2, 4, 0, 3, 1, 0, 4, 1, 0, 1, 2, 2], [0, 4, 2, 3, 1, 1, 0, 3, 0, 1, 2, 2], [0, 0, 4, 1, 3, 2, 2, 1, 4, 0, 2, 2], [4, 2, 3, 3, 1, 2, 0, 4, 3, 4, 2, 2], [1, 0, 1, 3, 4, 3, 0, 1, 2, 3, 2, 2], [3, 1, 2, 3, 1, 3, 1, 2, 2, 0, 2, 2], [4, 0, 0, 3, 0, 4, 2, 4, 0, 2, 2, 2], [4, 0, 1, 4, 2, 1, 4, 4, 1, 0, 2, 2], [3, 3, 2, 0, 4, 1, 0, 1, 1, 4, 2, 2], [4, 4, 3, 4, 1, 1, 3, 0, 2, 0, 2, 2], [2, 4, 2, 3, 1, 4, 3, 4, 3, 0, 2, 2], [2, 3, 4, 4, 2, 1, 4, 2, 0, 1, 2, 2], [3, 3, 1, 1, 1, 3, 0, 0, 4, 2, 2, 2], [0, 2, 1, 2, 1, 4, 0, 3, 0, 1, 2, 2], [2, 3, 0, 3, 4, 0, 3, 0, 1, 3, 2, 2], [3, 4, 3, 3, 0, 3, 4, 3, 1, 0, 2, 2], [4, 3, 1, 2, 2, 0, 3, 4, 0, 3, 2, 2], [3, 2, 2, 3, 0, 2, 1, 2, 3, 0, 2, 2], [2, 0, 0, 3, 3, 0, 4, 2, 2, 3, 2, 2], [3, 0, 3, 4, 4, 3, 4, 4, 0, 1, 2, 2], [0, 3, 3, 2, 3, 3, 0, 2, 4, 0, 2, 2], [1, 2, 2, 3, 4, 3, 4, 2, 0, 0, 2, 2], [0, 0, 3, 1, 1, 0, 4, 3, 2, 4, 2, 2], [1, 1, 0, 2, 0, 0, 1, 2, 3, 1, 2, 2], [3, 0, 1, 1, 3, 2, 0, 4, 2, 3, 2, 2], [0, 3, 0, 2, 1, 0, 0, 0, 3, 2, 2, 2], [1, 4, 1, 3, 4, 0, 2, 3, 0, 4, 2, 2], [0, 0, 3, 2, 3, 4, 2, 4, 4, 4, 2, 2], [3, 4, 3, 1, 0, 1, 3, 3, 1, 3, 2, 2], [1, 2, 3, 4, 4, 4, 0, 3, 4, 1, 2, 2], [0, 2, 0, 0, 0, 3, 2, 1, 1, 2, 2, 2], [1, 0, 2, 1, 0, 2, 0, 0, 3, 0, 2, 2], [3, 2, 2, 4, 4, 3, 0, 2, 0, 1, 2, 2], [0, 3, 3, 2, 0, 0, 2, 3, 1, 0, 2, 2], [0, 0, 0, 3, 2, 0, 2, 4, 4, 2, 2, 2], [1, 0, 3, 2, 1, 2, 1, 1, 3, 4, 2, 2], [2, 1, 1, 4, 4, 3, 0, 4, 3, 2, 2, 2], [3, 0, 3, 4, 3, 2, 0, 1, 2, 0, 2, 2], [1, 0, 0, 3, 1, 1, 3, 1, 2, 4, 2, 2], [3, 3, 0, 2, 4, 3, 4, 4, 3, 0, 2, 2], [1, 3, 0, 1, 4, 4, 3, 0, 2, 0, 2, 2], [0, 0, 3, 1, 4, 4, 2, 4, 4, 1, 2, 2], [0, 0, 1, 1, 4, 4, 2, 4, 0, 4, 2, 2], [3, 4, 0, 2, 1, 1, 3, 0, 1, 3, 2, 2], [1, 3, 0, 1, 0, 0, 2, 4, 4, 2, 2, 2], [2, 0, 0, 0, 4, 0, 3, 3, 1, 0, 2, 2], [0, 3, 4, 2, 4, 0, 4, 3, 2, 3, 2, 2], [0, 0, 1, 0, 0, 2, 0, 3, 2, 3, 2, 2], [1, 1, 1, 4, 1, 0, 0, 4, 4, 0, 2, 2], [0, 1, 3, 4, 0, 2, 3, 3, 0, 3, 2, 2], [3, 0, 3, 4, 1, 2, 0, 1, 4, 0, 2, 2], [1, 1, 2, 0, 4, 0, 3, 2, 4, 4, 2, 2], [4, 0, 3, 3, 3, 0, 3, 1, 0, 3, 2, 2], [3, 1, 2, 3, 0, 0, 0, 2, 4, 3, 2, 2], [2, 3, 4, 4, 4, 2, 0, 2, 4, 3, 2, 2], [4, 2, 2, 1, 3, 2, 3, 3, 1, 0, 2, 2], [2, 4, 2, 1, 0, 0, 3, 3, 2, 0, 2, 2], [1, 2, 3, 0, 2, 3, 2, 1, 4, 0, 2, 2], [2, 4, 1, 0, 1, 4, 3, 4, 3, 0, 2, 2], [4, 1, 1, 2, 4, 0, 1, 0, 0, 4, 2, 2], [3, 3, 2, 0, 1, 0, 2, 4, 4, 0, 2, 2], [2, 1, 2, 0, 0, 4, 3, 4, 4, 4, 2, 2], [1, 4, 0, 4, 2, 4, 0, 3, 4, 3, 2, 2], [4, 0, 0, 4, 0, 0, 0, 1, 1, 1, 2, 2], [3, 2, 0, 3, 2, 3, 4, 3, 1, 4, 2, 2], [0, 3, 0, 0, 0, 1, 4, 2, 2, 0, 2, 2], [4, 0, 1, 4, 0, 0, 0, 2, 2, 1, 2, 2], [4, 1, 3, 4, 4, 4, 2, 3, 4, 0, 2, 2], [3, 4, 1, 3, 4, 2, 0, 3, 0, 1, 2, 2], [4, 1, 4, 0, 3, 1, 2, 1, 1, 2, 2, 2], [4, 3, 1, 4, 3, 0, 4, 0, 1, 0, 2, 2], [4, 0, 2, 3, 3, 0, 4, 2, 3, 3, 2, 2], [4, 2, 0, 1, 3, 2, 1, 4, 1, 2, 2, 2], [1, 0, 2, 1, 2, 4, 0, 3, 3, 0, 2, 2], [0, 3, 1, 4, 1, 0, 4, 4, 4, 1, 2, 2], [2, 3, 1, 0, 4, 3, 2, 1, 2, 0, 2, 2], [4, 3, 2, 4, 4, 0, 4, 4, 3, 1, 2, 2], [0, 3, 2, 4, 3, 4, 2, 3, 3, 0, 2, 2], [1, 4, 4, 0, 1, 0, 0, 4, 4, 2, 2, 2], [4, 1, 1, 2, 2, 1, 4, 0, 3, 3, 2, 2], [4, 2, 4, 4, 3, 3, 3, 0, 3, 2, 2, 2], [2, 1, 1, 1, 1, 4, 2, 4, 2, 3, 2, 2], [3, 4, 4, 2, 4, 3, 1, 4, 1, 2, 2, 2], [3, 4, 1, 2, 0, 4, 1, 0, 3, 0, 2, 2], [0, 4, 3, 3, 4, 0, 4, 2, 3, 1, 2, 2], [0, 3, 0, 2, 0, 0, 2, 3, 3, 2, 2, 2], [2, 1, 1, 2, 1, 4, 0, 1, 2, 0, 2, 2], [4, 2, 2, 0, 3, 0, 2, 1, 0, 4, 2, 2], [3, 2, 0, 4, 0, 3, 3, 0, 4, 1, 2, 2], [0, 3, 3, 3, 4, 4, 0, 1, 2, 4, 2, 2], [0, 1, 4, 4, 0, 0, 3, 3, 3, 2, 2, 2], [1, 4, 1, 2, 0, 2, 1, 1, 1, 3, 2, 2], [1, 0, 2, 3, 4, 2, 2, 0, 4, 1, 2, 2], [4, 2, 1, 2, 3, 4, 2, 0, 1, 1, 2, 2], [1, 3, 4, 0, 0, 3, 3, 2, 4, 2, 2, 2], [1, 0, 3, 4, 2, 3, 0, 0, 1, 3, 2, 2], [4, 0, 1, 4, 4, 1, 1, 2, 2, 4, 2, 2], [4, 0, 2, 1, 1, 3, 1, 4, 0, 0, 2, 2], [1, 3, 3, 3, 4, 2, 0, 3, 1, 1, 2, 2], [3, 2, 3, 1, 4, 2, 1, 3, 2, 4, 2, 2], [0, 3, 2, 0, 4, 2, 2, 4, 0, 1, 2, 2], [2, 1, 4, 0, 1, 3, 0, 4, 3, 3, 2, 2], [2, 4, 4, 3, 1, 1, 0, 0, 3, 2, 2, 2], [0, 1, 0, 3, 3, 4, 1, 1, 4, 3, 2, 2], [2, 4, 3, 0, 0, 3, 4, 4, 0, 2, 2, 2], [4, 0, 1, 4, 1, 0, 2, 0, 3, 2, 2, 2], [4, 0, 2, 1, 2, 0, 4, 1, 1, 3, 2, 2], [1, 3, 4, 3, 4, 2, 3, 3, 4, 0, 2, 2], [0, 2, 3, 1, 2, 0, 2, 3, 0, 4, 2, 2], [4, 3, 3, 4, 0, 3, 2, 3, 4, 1, 2, 2], [0, 1, 3, 2, 1, 0, 1, 2, 0, 0, 2, 2], [3, 3, 4, 4, 4, 1, 3, 2, 4, 0, 2, 2], [1, 1, 4, 3, 0, 2, 3, 1, 3, 0, 2, 2], [1, 4, 4, 4, 3, 4, 0, 4, 1, 1, 2, 2], [2, 3, 1, 4, 1, 1, 4, 0, 3, 3, 2, 2], [4, 3, 4, 1, 2, 4, 1, 0, 3, 3, 2, 2], [4, 0, 4, 2, 3, 0, 3, 3, 3, 4, 2, 2], [3, 4, 4, 4, 1, 3, 1, 4, 1, 2, 2, 2], [1, 4, 1, 3, 4, 3, 2, 1, 3, 0, 2, 2], [1, 4, 0, 0, 2, 1, 0, 2, 4, 1, 2, 2], [1, 2, 2, 0, 4, 4, 0, 3, 3, 0, 2, 2], [2, 1, 0, 1, 4, 2, 2, 0, 0, 0, 2, 2], [1, 0, 3, 3, 0, 3, 2, 3, 0, 1, 2, 2], [2, 3, 1, 2, 3, 3, 0, 2, 4, 2, 2, 2], [1, 0, 2, 1, 3, 2, 1, 1, 2, 0, 2, 2], [2, 3, 1, 3, 2, 4, 0, 3, 3, 1, 2, 2], [0, 3, 3, 2, 4, 2, 2, 3, 0, 2, 2, 2], [4, 2, 2, 4, 4, 0, 2, 1, 1, 4, 2, 2], [3, 4, 4, 1, 4, 2, 1, 3, 4, 0, 2, 2], [1, 4, 3, 4, 2, 3, 0, 3, 0, 0, 2, 2], [1, 3, 0, 4, 3, 0, 0, 0, 4, 0, 2, 2], [2, 0, 2, 1, 0, 0, 4, 2, 3, 0, 2, 2], [1, 3, 0, 4, 1, 1, 3, 2, 2, 4, 2, 2], [3, 2, 4, 3, 2, 4, 1, 4, 2, 3, 2, 2], [0, 0, 3, 2, 4, 1, 2, 0, 1, 0, 2, 2], [1, 1, 3, 0, 0, 3, 1, 4, 1, 2, 2, 2], [4, 4, 1, 3, 4, 3, 3, 0, 3, 4, 2, 2], [0, 3, 1, 0, 2, 1, 3, 3, 3, 2, 2, 2], [3, 1, 2, 4, 3, 4, 3, 0, 4, 0, 2, 2], [2, 0, 4, 0, 1, 3, 1, 0, 4, 3, 2, 2], [3, 3, 3, 0, 3, 1, 4, 2, 1, 4, 2, 2], [1, 2, 3, 4, 4, 4, 4, 0, 0, 4, 2, 2], [2, 1, 0, 1, 0, 0, 2, 0, 2, 4, 2, 2], [2, 3, 2, 0, 0, 2, 2, 4, 0, 1, 2, 2], [3, 3, 0, 4, 2, 4, 4, 4, 3, 1, 2, 2], [1, 1, 1, 3, 2, 3, 0, 3, 0, 1, 2, 2], [3, 0, 3, 3, 1, 2, 1, 0, 0, 3, 2, 2], [1, 2, 4, 3, 4, 2, 3, 3, 1, 4, 2, 2], [4, 0, 3, 1, 4, 1, 4, 3, 3, 2, 2, 2], [3, 2, 4, 4, 4, 0, 0, 2, 4, 3, 2, 2], [0, 4, 0, 2, 1, 0, 4, 3, 2, 0, 2, 2], [4, 0, 4, 1, 0, 0, 4, 3, 1, 4, 2, 2], [0, 1, 1, 0, 2, 0, 1, 4, 4, 1, 2, 2], [4, 2, 3, 0, 3, 3, 0, 3, 2, 0, 2, 2], [1, 3, 3, 2, 0, 1, 3, 1, 2, 3, 2, 2], [1, 1, 3, 3, 0, 2, 1, 4, 3, 1, 2, 2], [0, 1, 1, 2, 2, 4, 3, 2, 3, 3, 2, 2], [3, 1, 0, 0, 3, 2, 0, 2, 2, 4, 2, 2], [1, 1, 4, 3, 2, 1, 3, 3, 3, 4, 2, 2], [0, 4, 4, 3, 4, 4, 2, 3, 1, 3, 2, 2], [0, 3, 0, 2, 4, 0, 1, 2, 4, 3, 2, 2], [0, 2, 1, 4, 4, 1, 4, 4, 3, 1, 2, 2], [3, 2, 4, 1, 3, 0, 2, 4, 0, 0, 2, 2], [2, 4, 0, 3, 0, 4, 2, 3, 4, 3, 2, 2], [4, 2, 0, 0, 2, 4, 0, 4, 2, 1, 2, 2], [4, 4, 3, 0, 0, 0, 1, 4, 3, 1, 2, 2], [3, 1, 0, 2, 2, 4, 1, 2, 1, 4, 2, 2], [1, 0, 4, 3, 3, 4, 3, 0, 2, 3, 2, 2], [2, 3, 3, 2, 1, 0, 0, 2, 0, 1, 2, 2], [3, 1, 1, 2, 0, 2, 2, 1, 1, 3, 2, 2], [3, 1, 4, 0, 2, 4, 0, 3, 1, 3, 2, 2], [2, 1, 1, 0, 3, 1, 4, 4, 2, 4, 2, 2], [3, 1, 3, 2, 3, 3, 3, 0, 0, 0, 2, 2], [4, 4, 2, 4, 3, 0, 4, 0, 2, 0, 2, 2], [3, 1, 0, 4, 4, 4, 0, 0, 1, 3, 2, 2], [4, 3, 0, 4, 1, 4, 3, 2, 2, 3, 2, 2], [4, 4, 0, 4, 0, 1, 4, 1, 2, 1, 2, 2], [4, 2, 3, 4, 0, 1, 0, 4, 2, 3, 2, 2], [3, 3, 3, 2, 2, 3, 2, 4, 4, 4, 2, 2], [3, 4, 1, 0, 2, 4, 2, 0, 2, 3, 2, 2], [1, 1, 3, 0, 2, 0, 0, 4, 2, 4, 2, 2], [4, 2, 3, 1, 3, 4, 0, 1, 4, 0, 2, 2], [2, 3, 2, 1, 3, 4, 2, 4, 1, 2, 2, 2], [2, 1, 3, 2, 2, 3, 0, 0, 1, 4, 2, 2], [1, 3, 3, 4, 3, 0, 1, 2, 1, 1, 2, 2], [0, 3, 4, 2, 1, 0, 3, 0, 2, 0, 2, 2], [1, 0, 4, 4, 2, 4, 3, 2, 4, 0, 2, 2], [4, 0, 1, 0, 1, 2, 1, 3, 0, 4, 2, 2], [0, 4, 2, 3, 0, 2, 4, 4, 2, 0, 2, 2], [1, 0, 4, 4, 4, 2, 3, 3, 1, 3, 2, 2], [1, 3, 0, 2, 4, 3, 1, 1, 0, 0, 2, 2], [4, 0, 1, 4, 2, 1, 1, 2, 2, 4, 2, 2], [0, 4, 0, 2, 2, 0, 0, 1, 1, 3, 2, 2], [1, 2, 3, 1, 1, 1, 3, 3, 0, 4, 2, 2], [1, 1, 4, 2, 4, 3, 3, 3, 0, 2, 2, 2], [0, 0, 3, 2, 1, 1, 0, 1, 3, 4, 2, 2], [0, 1, 4, 4, 0, 3, 2, 3, 0, 2, 2, 2], [3, 3, 3, 4, 2, 1, 0, 3, 1, 2, 2, 2], [2, 0, 4, 2, 3, 2, 0, 3, 1, 1, 2, 2], [4, 2, 3, 0, 0, 3, 4, 4, 1, 1, 2, 2], [4, 3, 1, 3, 0, 3, 1, 2, 4, 2, 2, 2], [0, 1, 0, 2, 2, 4, 0, 3, 1, 0, 2, 2], [0, 3, 3, 2, 4, 0, 1, 1, 3, 1, 2, 2], [4, 4, 1, 4, 4, 2, 2, 4, 1, 3, 2, 2], [1, 1, 2, 1, 2, 0, 2, 3, 4, 0, 2, 2], [4, 2, 0, 0, 4, 0, 2, 1, 0, 1, 2, 2], [2, 3, 2, 0, 2, 4, 3, 4, 1, 0, 2, 2], [3, 2, 1, 4, 4, 4, 4, 3, 3, 0, 2, 2], [1, 1, 0, 1, 1, 4, 0, 4, 1, 2, 2, 2], [4, 0, 2, 1, 4, 1, 1, 2, 2, 3, 2, 2], [3, 3, 2, 0, 0, 3, 2, 1, 1, 3, 2, 2], [3, 4, 3, 0, 2, 1, 2, 3, 4, 0, 2, 2], [2, 0, 1, 4, 0, 2, 2, 3, 4, 4, 2, 2], [0, 2, 1, 1, 0, 3, 2, 3, 3, 0, 2, 2], [2, 3, 0, 1, 0, 3, 4, 4, 1, 0, 2, 2], [1, 0, 1, 1, 4, 3, 0, 3, 2, 3, 2, 2], [2, 1, 4, 0, 3, 2, 3, 0, 4, 2, 2, 2], [4, 3, 3, 4, 0, 4, 0, 2, 0, 0, 2, 2], [3, 0, 0, 3, 1, 4, 0, 4, 4, 0, 2, 2], [1, 1, 3, 3, 3, 4, 0, 4, 3, 0, 2, 2], [4, 1, 4, 4, 0, 1, 2, 3, 2, 0, 2, 2], [4, 0, 1, 3, 0, 2, 4, 3, 2, 0, 2, 2], [2, 3, 3, 1, 1, 2, 4, 2, 4, 4, 2, 2], [4, 1, 1, 0, 1, 4, 2, 3, 0, 1, 2, 2], [3, 3, 3, 1, 2, 0, 3, 0, 4, 4, 2, 2], [2, 3, 2, 0, 4, 1, 3, 4, 3, 0, 2, 2], [3, 4, 4, 2, 0, 0, 3, 3, 4, 4, 2, 2], [3, 1, 1, 1, 0, 1, 3, 3, 4, 1, 2, 2], [3, 2, 0, 1, 2, 3, 1, 3, 1, 4, 2, 2], [4, 0, 3, 2, 4, 2, 3, 0, 3, 3, 2, 2], [0, 1, 0, 3, 1, 0, 1, 1, 0, 2, 2, 2], [2, 0, 4, 4, 1, 0, 0, 4, 0, 1, 2, 2], [1, 2, 3, 2, 2, 0, 2, 4, 4, 4, 2, 2], [0, 4, 1, 2, 2, 3, 2, 0, 0, 2, 2, 2], [2, 4, 4, 0, 0, 3, 4, 3, 2, 3, 2, 2], [2, 1, 1, 1, 0, 4, 3, 4, 4, 2, 2, 2], [0, 0, 3, 0, 1, 2, 3, 3, 1, 4, 2, 2], [2, 1, 1, 0, 3, 4, 2, 4, 1, 4, 2, 2], [4, 2, 3, 1, 0, 4, 1, 1, 4, 3, 2, 2], [1, 1, 2, 3, 0, 3, 4, 1, 3, 4, 2, 2], [0, 0, 4, 1, 2, 0, 2, 3, 2, 4, 2, 2], [4, 4, 3, 3, 0, 1, 1, 0, 3, 4, 2, 2], [3, 1, 4, 1, 4, 2, 0, 0, 1, 0, 2, 2], [3, 3, 3, 0, 4, 1, 1, 2, 1, 4, 2, 2], [3, 0, 4, 2, 0, 0, 3, 3, 3, 4, 2, 2], [0, 3, 4, 2, 3, 1, 2, 0, 1, 0, 2, 2], [1, 3, 1, 4, 0, 0, 1, 1, 0, 3, 2, 2], [2, 0, 4, 0, 0, 2, 0, 3, 4, 3, 2, 2], [1, 0, 0, 2, 3, 3, 4, 0, 4, 4, 2, 2], [1, 0, 2, 3, 3, 2, 1, 3, 3, 1, 2, 2], [4, 0, 1, 1, 4, 4, 4, 2, 3, 2, 2, 2], [0, 4, 0, 1, 3, 2, 2, 0, 4, 1, 2, 2], [2, 1, 4, 1, 1, 1, 3, 2, 0, 4, 2, 2], [0, 3, 1, 3, 1, 1, 0, 2, 0, 4, 2, 2], [2, 1, 0, 1, 4, 3, 2, 4, 1, 0, 2, 2], [4, 0, 2, 1, 0, 4, 3, 2, 1, 1, 2, 2], [0, 1, 1, 0, 0, 3, 3, 2, 1, 2, 2, 2], [4, 1, 1, 2, 0, 4, 2, 0, 3, 1, 2, 2], [3, 4, 0, 2, 3, 0, 4, 4, 0, 3, 2, 2], [4, 0, 0, 1, 3, 0, 0, 3, 3, 1, 2, 2], [1, 4, 4, 0, 3, 4, 0, 4, 1, 1, 2, 2], [1, 4, 0, 1, 1, 3, 2, 1, 1, 0, 2, 2], [4, 3, 1, 1, 3, 0, 1, 3, 3, 4, 2, 2], [0, 1, 3, 1, 1, 3, 3, 0, 3, 2, 2, 2], [0, 0, 1, 0, 1, 2, 0, 1, 2, 0, 2, 2], [3, 4, 0, 4, 1, 4, 3, 3, 0, 3, 2, 2], [3, 3, 4, 0, 3, 4, 1, 1, 2, 1, 2, 2], [2, 0, 2, 4, 4, 2, 4, 0, 3, 4, 2, 2], [0, 2, 0, 3, 4, 3, 2, 4, 1, 3, 2, 2], [0, 1, 1, 1, 2, 4, 0, 4, 0, 3, 2, 2], [1, 0, 0, 4, 2, 0, 0, 2, 1, 3, 2, 2], [2, 0, 3, 0, 0, 3, 4, 2, 3, 2, 2, 2], [1, 3, 3, 1, 0, 0, 4, 4, 0, 3, 2, 2], [2, 1, 0, 3, 0, 1, 4, 4, 4, 3, 2, 2], [0, 2, 4, 2, 0, 4, 1, 3, 4, 3, 2, 2], [4, 1, 2, 3, 3, 0, 3, 3, 0, 2, 2, 2], [1, 4, 2, 0, 3, 4, 1, 1, 3, 2, 2, 2], [1, 3, 1, 4, 4, 2, 4, 4, 0, 3, 2, 2], [1, 4, 2, 0, 3, 1, 0, 0, 0, 4, 2, 2], [0, 1, 1, 0, 3, 3, 4, 1, 4, 0, 2, 2], [1, 2, 2, 4, 3, 3, 1, 4, 4, 1, 2, 2], [4, 0, 4, 4, 2, 1, 0, 0, 0, 1, 2, 2], [0, 3, 2, 3, 2, 1, 3, 3, 1, 3, 2, 2], [0, 3, 1, 1, 4, 4, 1, 2, 2, 4, 2, 2], [4, 4, 1, 0, 2, 4, 0, 4, 3, 0, 2, 2], [3, 4, 3, 0, 0, 3, 1, 0, 0, 4, 2, 2], [0, 3, 1, 3, 2, 4, 0, 0, 2, 0, 2, 2], [4, 0, 2, 0, 2, 4, 4, 3, 4, 4, 2, 2], [4, 1, 0, 1, 0, 4, 1, 2, 1, 3, 2, 2], [0, 1, 4, 0, 1, 0, 2, 1, 1, 2, 2, 2], [4, 2, 4, 4, 3, 4, 1, 0, 3, 3, 2, 2], [4, 2, 2, 3, 0, 2, 3, 3, 4, 1, 2, 2], [3, 4, 2, 0, 0, 0, 0, 3, 3, 1, 2, 2], [2, 3, 4, 0, 0, 3, 2, 0, 2, 1, 2, 2], [3, 2, 1, 4, 1, 0, 0, 3, 3, 3, 2, 2], [4, 1, 4, 0, 0, 2, 2, 0, 0, 3, 2, 2], [2, 4, 2, 0, 1, 4, 0, 0, 4, 0, 2, 2], [4, 4, 3, 4, 3, 0, 0, 0, 0, 3, 2, 2], [1, 4, 4, 4, 3, 1, 1, 3, 1, 2, 2, 2], [3, 4, 3, 0, 0, 3, 0, 0, 2, 1, 2, 2], [0, 4, 2, 1, 1, 0, 1, 4, 0, 2, 2, 2], [4, 1, 1, 2, 3, 3, 0, 3, 0, 4, 2, 2], [0, 3, 2, 1, 2, 4, 1, 1, 0, 1, 2, 2], [2, 4, 1, 1, 1, 0, 0, 1, 3, 0, 2, 2], [4, 4, 1, 3, 3, 4, 3, 2, 3, 1, 2, 2], [0, 1, 1, 3, 1, 0, 4, 1, 3, 3, 2, 2], [0, 3, 0, 0, 1, 2, 4, 4, 0, 4, 2, 2], [0, 1, 0, 0, 2, 1, 3, 2, 2, 0, 2, 2], [4, 0, 4, 3, 3, 3, 3, 1, 0, 0, 2, 2], [4, 1, 0, 1, 0, 2, 2, 3, 1, 0, 2, 2], [3, 4, 1, 3, 3, 2, 2, 3, 0, 2, 2, 2], [4, 1, 3, 1, 1, 3, 4, 2, 3, 3, 2, 2], [3, 4, 0, 3, 4, 3, 0, 1, 2, 1, 2, 2], [0, 3, 3, 1, 4, 3, 4, 4, 3, 3, 2, 2], [4, 1, 4, 2, 1, 1, 2, 0, 2, 3, 2, 2], [2, 3, 0, 3, 1, 3, 1, 0, 0, 1, 2, 2], [0, 4, 1, 4, 3, 2, 2, 0, 2, 1, 2, 2], [1, 3, 3, 4, 0, 1, 3, 2, 0, 0, 2, 2], [3, 2, 3, 0, 0, 4, 0, 2, 4, 2, 2, 2], [4, 0, 1, 4, 4, 2, 0, 2, 2, 3, 2, 2], [1, 1, 4, 0, 3, 1, 0, 2, 1, 4, 2, 2], [3, 3, 0, 0, 1, 3, 0, 4, 3, 0, 2, 2], [1, 4, 4, 3, 3, 0, 4, 2, 0, 3, 2, 2], [1, 3, 4, 4, 3, 4, 0, 3, 3, 2, 2, 2], [1, 4, 0, 3, 0, 4, 1, 1, 1, 2, 2, 2], [2, 0, 4, 4, 1, 3, 3, 0, 4, 3, 2, 2], [2, 0, 3, 1, 1, 1, 1, 3, 2, 4, 2, 2], [4, 3, 1, 4, 4, 0, 0, 3, 1, 3, 2, 2], [3, 4, 4, 0, 3, 0, 4, 2, 4, 1, 2, 2], [1, 0, 3, 0, 3, 1, 4, 1, 2, 4, 2, 2], [2, 0, 0, 4, 3, 0, 0, 2, 4, 3, 2, 2], [1, 4, 2, 3, 3, 0, 3, 4, 4, 0, 2, 2], [1, 3, 0, 2, 1, 0, 1, 2, 2, 4, 2, 2], [1, 4, 4, 2, 2, 0, 3, 3, 3, 2, 2, 2], [3, 2, 0, 1, 4, 1, 0, 2, 4, 4, 2, 2], [3, 2, 3, 3, 0, 1, 1, 1, 3, 4, 2, 2], [4, 1, 4, 3, 1, 2, 3, 1, 3, 0, 2, 2], [0, 0, 1, 3, 0, 4, 2, 3, 2, 4, 2, 2], [3, 3, 1, 3, 0, 3, 2, 0, 1, 0, 2, 2], [2, 3, 2, 4, 0, 3, 1, 2, 4, 4, 2, 2], [4, 1, 2, 3, 4, 3, 3, 3, 1, 0, 2, 2], [1, 4, 0, 3, 3, 1, 2, 1, 0, 4, 2, 2], [1, 1, 3, 4, 4, 1, 0, 1, 1, 2, 2, 2], [4, 2, 0, 3, 0, 1, 3, 2, 1, 1, 2, 2], [0, 2, 4, 0, 3, 4, 4, 4, 1, 4, 2, 2], [1, 3, 4, 0, 1, 4, 0, 2, 3, 0, 2, 2], [3, 2, 4, 0, 2, 1, 0, 4, 4, 1, 2, 2], [4, 2, 0, 1, 1, 0, 3, 2, 1, 4, 2, 2], [2, 1, 3, 2, 4, 0, 2, 4, 1, 1, 2, 2], [3, 0, 3, 2, 3, 3, 3, 1, 4, 1, 2, 2], [4, 4, 0, 0, 2, 4, 4, 3, 1, 2, 2, 2], [0, 0, 2, 1, 1, 3, 1, 0, 2, 4, 2, 2], [0, 2, 4, 1, 4, 4, 3, 4, 4, 3, 2, 2], [1, 3, 1, 2, 0, 4, 3, 3, 0, 2, 2, 2], [3, 3, 2, 1, 1, 0, 1, 4, 0, 2, 2, 2], [2, 4, 2, 3, 1, 2, 0, 0, 0, 4, 2, 2], [0, 0, 1, 3, 4, 2, 0, 4, 4, 4, 2, 2], [2, 0, 0, 2, 4, 2, 1, 3, 1, 2, 2, 2], [1, 4, 3, 4, 0, 0, 3, 3, 0, 4, 2, 2], [4, 0, 3, 3, 3, 2, 4, 4, 3, 0, 2, 2], [4, 4, 1, 4, 3, 0, 3, 2, 0, 0, 2, 2], [4, 2, 4, 3, 2, 1, 4, 4, 3, 0, 2, 2], [2, 3, 4, 3, 2, 0, 3, 0, 1, 2, 2, 2], [3, 1, 0, 2, 4, 3, 4, 4, 2, 4, 2, 2], [4, 1, 3, 0, 0, 4, 0, 1, 3, 3, 2, 2], [0, 2, 3, 0, 2, 0, 4, 1, 4, 4, 2, 2], [3, 3, 1, 0, 2, 3, 0, 2, 3, 4, 2, 2], [2, 0, 0, 2, 0, 3, 3, 4, 4, 3, 2, 2], [3, 3, 0, 2, 0, 4, 2, 0, 1, 1, 2, 2], [4, 1, 3, 1, 0, 1, 3, 0, 0, 2, 2, 2], [3, 1, 1, 2, 0, 3, 2, 1, 4, 1, 2, 2], [4, 0, 4, 1, 4, 2, 3, 3, 1, 0, 2, 2], [4, 4, 2, 1, 0, 0, 3, 1, 4, 3, 2, 2], [1, 3, 0, 1, 3, 4, 3, 2, 1, 4, 2, 2], [4, 3, 3, 2, 0, 1, 3, 3, 3, 4, 2, 2], [4, 0, 2, 1, 0, 1, 1, 1, 0, 2, 2, 2], [2, 1, 1, 4, 4, 2, 1, 2, 3, 1, 2, 2], [1, 4, 0, 2, 3, 4, 3, 3, 4, 1, 2, 2], [1, 0, 1, 3, 0, 4, 3, 0, 4, 2, 2, 2], [2, 0, 1, 4, 2, 1, 4, 3, 4, 0, 2, 2], [3, 1, 0, 3, 3, 4, 3, 2, 1, 2, 2, 2], [0, 1, 3, 2, 4, 1, 0, 4, 2, 3, 2, 2], [1, 0, 0, 2, 4, 3, 0, 4, 2, 3, 2, 2], [1, 0, 4, 1, 4, 0, 3, 0, 3, 1, 2, 2], [3, 1, 2, 1, 4, 1, 4, 0, 4, 2, 2, 2], [2, 1, 0, 4, 3, 2, 1, 3, 0, 3, 2, 2], [3, 3, 1, 1, 4, 4, 3, 2, 2, 4, 2, 2], [2, 3, 3, 0, 1, 2, 1, 4, 0, 2, 2, 2], [1, 3, 4, 4, 2, 4, 3, 4, 2, 1, 2, 2], [1, 4, 3, 1, 0, 3, 1, 3, 4, 0, 2, 2], [4, 0, 0, 2, 1, 0, 2, 3, 1, 1, 2, 2], [4, 2, 3, 3, 3, 4, 3, 1, 4, 3, 2, 2], [0, 4, 0, 2, 4, 3, 4, 0, 1, 3, 2, 2], [0, 4, 1, 4, 2, 0, 4, 3, 1, 3, 2, 2], [1, 3, 3, 0, 4, 0, 3, 4, 1, 4, 2, 2], [2, 1, 3, 2, 1, 4, 2, 3, 0, 1, 2, 2], [0, 1, 1, 3, 2, 1, 3, 4, 3, 1, 2, 2], [1, 0, 1, 4, 4, 3, 2, 3, 0, 3, 2, 2], [3, 0, 1, 0, 3, 3, 3, 2, 1, 1, 2, 2], [3, 2, 2, 1, 2, 3, 2, 0, 3, 3, 2, 2], [4, 4, 0, 3, 3, 4, 4, 2, 4, 3, 2, 2], [3, 2, 4, 0, 1, 4, 3, 3, 0, 0, 2, 2], [2, 3, 3, 1, 0, 2, 0, 0, 0, 3, 2, 2], [0, 1, 3, 4, 3, 1, 4, 2, 4, 0, 2, 2], [0, 4, 1, 3, 0, 3, 4, 2, 2, 0, 2, 2], [4, 3, 3, 3, 4, 2, 4, 0, 2, 1, 2, 2], [4, 2, 1, 2, 1, 4, 3, 4, 3, 2, 2, 2], [1, 3, 0, 3, 0, 1, 3, 0, 2, 4, 2, 2], [2, 4, 2, 1, 3, 0, 4, 0, 0, 1, 2, 2], [2, 0, 1, 0, 1, 3, 3, 3, 0, 3, 2, 2], [2, 1, 3, 3, 4, 1, 4, 3, 1, 2, 2, 2], [4, 1, 3, 0, 2, 0, 4, 0, 0, 0, 2, 2], [3, 4, 4, 2, 2, 1, 1, 2, 4, 4, 2, 2], [0, 1, 1, 0, 4, 0, 0, 4, 0, 2, 2, 2], [2, 0, 1, 4, 0, 2, 1, 1, 1, 0, 2, 2], [3, 3, 1, 2, 1, 3, 1, 0, 2, 4, 2, 2], [0, 2, 0, 0, 4, 0, 3, 3, 0, 3, 2, 2], [2, 4, 0, 2, 0, 1, 4, 1, 3, 3, 2, 2], [1, 0, 0, 4, 4, 4, 3, 3, 0, 1, 2, 2], [0, 0, 4, 4, 1, 4, 1, 1, 1, 0, 2, 2], [4, 4, 0, 4, 3, 3, 0, 2, 2, 0, 2, 2], [0, 3, 3, 0, 1, 1, 3, 3, 0, 1, 2, 2], [4, 0, 2, 1, 4, 1, 4, 3, 4, 4, 2, 2], [1, 2, 2, 1, 1, 4, 1, 3, 2, 3, 2, 2], [0, 1, 1, 4, 2, 4, 3, 2, 0, 0, 2, 2], [3, 0, 1, 3, 4, 2, 4, 3, 1, 4, 2, 2], [0, 3, 4, 1, 3, 4, 2, 0, 1, 3, 2, 2], [1, 0, 3, 0, 4, 1, 2, 4, 0, 4, 2, 2], [3, 1, 0, 4, 4, 3, 1, 1, 2, 3, 2, 2], [1, 3, 4, 2, 3, 2, 3, 1, 3, 4, 2, 2], [3, 1, 0, 3, 1, 3, 2, 3, 1, 1, 2, 2], [0, 2, 2, 0, 3, 4, 4, 2, 1, 3, 2, 2], [2, 3, 3, 1, 4, 0, 2, 0, 4, 3, 2, 2], [0, 2, 4, 0, 2, 0, 2, 1, 2, 3, 2, 2], [3, 1, 4, 3, 3, 2, 4, 4, 0, 3, 2, 2], [3, 0, 1, 4, 4, 0, 4, 4, 3, 4, 2, 2], [4, 0, 3, 3, 2, 3, 2, 4, 1, 0, 2, 2], [3, 2, 2, 3, 0, 0, 2, 4, 4, 1, 2, 2], [1, 4, 2, 3, 3, 2, 1, 2, 1, 1, 2, 2], [0, 3, 3, 4, 3, 3, 3, 1, 4, 3, 2, 2], [1, 4, 1, 0, 1, 1, 0, 4, 3, 2, 2, 2], [3, 0, 4, 2, 0, 3, 3, 2, 1, 0, 2, 2], [0, 2, 3, 1, 4, 2, 0, 1, 3, 0, 2, 2], [0, 3, 0, 2, 3, 1, 1, 4, 1, 3, 2, 2], [3, 3, 1, 4, 1, 1, 2, 0, 1, 0, 2, 2], [0, 4, 4, 0, 0, 2, 2, 3, 3, 3, 2, 2], [4, 3, 3, 0, 0, 2, 2, 4, 0, 0, 2, 2], [4, 2, 0, 2, 4, 1, 0, 4, 4, 3, 2, 2], [3, 2, 4, 1, 3, 3, 0, 3, 2, 3, 2, 2], [1, 1, 1, 0, 3, 1, 1, 3, 3, 4, 2, 2], [0, 4, 3, 4, 1, 3, 0, 2, 1, 2, 2, 2], [3, 3, 2, 1, 1, 1, 4, 1, 3, 0, 2, 2], [3, 3, 1, 3, 1, 0, 3, 2, 3, 4, 2, 2], [4, 4, 0, 2, 2, 1, 0, 3, 3, 0, 2, 2], [3, 2, 1, 3, 3, 4, 0, 4, 3, 0, 2, 2], [3, 3, 1, 0, 3, 0, 1, 1, 4, 3, 2, 2], [0, 2, 3, 3, 0, 3, 3, 2, 4, 2, 2, 2], [0, 1, 0, 4, 4, 3, 0, 0, 3, 2, 2, 2], [0, 3, 3, 4, 3, 3, 1, 1, 4, 0, 2, 2], [1, 2, 3, 2, 3, 4, 4, 4, 3, 3, 2, 2], [4, 2, 2, 1, 4, 3, 0, 2, 3, 1, 2, 2], [3, 4, 0, 2, 0, 1, 3, 0, 0, 4, 2, 2], [0, 3, 0, 4, 1, 2, 2, 1, 0, 0, 2, 2], [1, 4, 3, 0, 3, 2, 0, 3, 0, 0, 2, 2], [2, 1, 1, 3, 1, 0, 3, 1, 1, 2, 2, 2], [3, 2, 4, 4, 3, 0, 0, 0, 1, 3, 2, 2], [3, 4, 2, 3, 2, 1, 3, 1, 1, 4, 2, 2], [4, 3, 3, 3, 1, 0, 4, 1, 1, 4, 2, 2], [1, 4, 3, 4, 4, 4, 4, 2, 3, 3, 2, 2], [2, 4, 4, 2, 4, 0, 4, 3, 1, 3, 2, 2], [3, 0, 0, 3, 2, 1, 0, 1, 1, 2, 2, 2], [0, 2, 1, 3, 3, 4, 3, 0, 0, 3, 2, 2], [3, 0, 4, 4, 1, 3, 3, 1, 2, 0, 2, 2], [3, 1, 0, 0, 2, 1, 0, 4, 3, 4, 2, 2], [1, 2, 0, 4, 0, 3, 3, 3, 3, 1, 2, 2], [1, 2, 0, 1, 3, 0, 4, 2, 2, 0, 2, 2], [1, 0, 4, 2, 2, 0, 2, 4, 0, 2, 2, 2], [3, 3, 1, 3, 2, 3, 1, 1, 2, 1, 2, 2], [1, 3, 4, 2, 0, 2, 3, 2, 2, 1, 2, 2], [0, 2, 0, 1, 0, 3, 4, 2, 0, 4, 2, 2], [0, 4, 1, 3, 2, 1, 0, 2, 3, 2, 2, 2], [4, 4, 3, 1, 0, 4, 0, 2, 1, 4, 2, 2], [0, 0, 4, 4, 4, 0, 0, 3, 3, 2, 2, 2], [1, 4, 0, 2, 2, 4, 3, 2, 0, 4, 2, 2], [3, 1, 1, 4, 4, 2, 0, 1, 3, 0, 2, 2], [4, 4, 0, 2, 4, 1, 1, 3, 3, 0, 2, 2], [1, 4, 3, 4, 0, 0, 3, 2, 0, 2, 2, 2], [0, 2, 4, 1, 0, 1, 4, 3, 3, 3, 2, 2], [0, 2, 0, 0, 4, 1, 1, 4, 4, 2, 2, 2], [1, 3, 0, 1, 4, 4, 4, 2, 2, 4, 2, 2], [0, 2, 1, 1, 4, 0, 2, 3, 3, 0, 2, 2], [3, 3, 1, 4, 2, 3, 3, 2, 1, 1, 2, 2], [0, 1, 1, 1, 4, 2, 4, 4, 3, 0, 2, 2], [0, 3, 3, 1, 4, 4, 4, 3, 0, 2, 2, 2], [3, 4, 0, 3, 3, 3, 1, 2, 4, 3, 2, 2], [0, 4, 3, 1, 0, 3, 2, 0, 4, 4, 2, 2], [2, 0, 3, 2, 4, 0, 2, 4, 1, 2, 2, 2], [3, 1, 2, 0, 0, 4, 2, 1, 3, 4, 2, 2], [2, 3, 3, 3, 3, 0, 0, 3, 4, 3, 2, 2], [1, 3, 2, 1, 3, 1, 0, 4, 4, 4, 2, 2], [0, 0, 2, 4, 1, 3, 1, 1, 0, 1, 2, 2], [1, 4, 2, 0, 1, 0, 3, 0, 1, 2, 2, 2], [1, 4, 4, 1, 0, 3, 0, 2, 0, 4, 2, 2], [4, 0, 2, 4, 3, 3, 4, 4, 1, 4, 2, 2], [4, 2, 3, 1, 2, 3, 0, 0, 2, 1, 2, 2], [1, 1, 2, 4, 4, 0, 1, 0, 4, 1, 2, 2], [4, 3, 4, 4, 0, 0, 0, 2, 2, 4, 2, 2], [1, 4, 0, 2, 3, 3, 1, 1, 1, 0, 2, 2], [3, 1, 4, 0, 3, 2, 0, 4, 4, 4, 2, 2], [2, 0, 3, 4, 4, 1, 3, 0, 0, 2, 2, 2], [4, 2, 3, 3, 2, 4, 0, 0, 3, 4, 2, 2], [0, 0, 2, 3, 3, 4, 0, 2, 1, 0, 2, 2], [1, 0, 0, 1, 4, 4, 3, 3, 3, 4, 2, 2], [4, 2, 1, 1, 0, 1, 3, 3, 3, 0, 2, 2], [3, 1, 3, 4, 0, 4, 1, 3, 4, 2, 2, 2], [2, 4, 1, 0, 0, 4, 3, 3, 4, 4, 2, 2], [0, 0, 1, 4, 3, 2, 1, 0, 3, 1, 2, 2], [4, 1, 1, 2, 2, 4, 4, 4, 0, 1, 2, 2], [1, 3, 0, 3, 3, 2, 0, 4, 3, 0, 2, 2], [1, 1, 1, 0, 0, 1, 4, 4, 0, 2, 2, 2], [4, 3, 3, 2, 0, 0, 1, 4, 0, 3, 2, 2], [0, 2, 0, 3, 2, 4, 3, 3, 2, 0, 2, 2], [3, 3, 1, 1, 2, 0, 4, 3, 3, 1, 2, 2], [1, 0, 0, 4, 0, 3, 3, 1, 0, 2, 2, 2], [0, 2, 4, 4, 3, 2, 2, 3, 0, 4, 2, 2], [2, 1, 2, 3, 4, 2, 1, 4, 1, 1, 2, 2], [1, 4, 0, 0, 2, 0, 4, 0, 3, 3, 2, 2], [0, 2, 2, 4, 4, 3, 4, 1, 0, 0, 2, 2], [3, 4, 1, 1, 0, 1, 1, 3, 4, 1, 2, 2], [2, 4, 0, 2, 1, 3, 0, 4, 2, 3, 2, 2], [1, 3, 3, 0, 4, 3, 2, 3, 2, 1, 2, 2], [4, 2, 3, 0, 0, 2, 1, 2, 0, 3, 2, 2], [3, 4, 4, 4, 1, 3, 1, 0, 0, 0, 2, 2], [3, 1, 0, 2, 3, 3, 3, 0, 1, 3, 2, 2], [0, 1, 1, 4, 4, 2, 0, 0, 1, 1, 2, 2], [2, 0, 3, 1, 3, 4, 0, 3, 1, 2, 2, 2], [4, 0, 4, 3, 3, 4, 2, 3, 4, 4, 2, 2], [0, 1, 1, 4, 0, 3, 2, 1, 4, 0, 2, 2], [0, 2, 0, 3, 2, 1, 2, 0, 1, 4, 2, 2], [1, 2, 3, 0, 1, 3, 4, 1, 0, 4, 2, 2], [4, 1, 3, 3, 0, 3, 4, 2, 0, 2, 2, 2], [2, 1, 4, 1, 0, 0, 3, 4, 4, 3, 2, 2], [4, 2, 3, 4, 0, 0, 2, 0, 0, 3, 2, 2], [1, 2, 2, 1, 0, 0, 4, 0, 4, 2, 2, 2], [0, 4, 1, 0, 1, 4, 4, 2, 2, 0, 2, 2], [3, 0, 1, 2, 3, 1, 2, 4, 0, 0, 2, 2], [3, 2, 4, 0, 4, 1, 4, 4, 2, 0, 2, 2], [0, 2, 4, 4, 2, 3, 2, 4, 3, 1, 2, 2], [4, 4, 0, 0, 1, 1, 2, 0, 2, 4, 2, 2], [1, 2, 1, 0, 0, 0, 2, 4, 0, 2, 2, 2], [1, 4, 2, 4, 4, 0, 0, 3, 3, 0, 2, 2], [3, 3, 3, 0, 0, 0, 1, 4, 0, 1, 2, 2], [4, 0, 0, 4, 0, 0, 4, 1, 3, 3, 2, 2], [1, 0, 4, 4, 0, 2, 1, 1, 1, 2, 2, 2], [3, 2, 0, 3, 1, 1, 2, 3, 0, 1, 2, 2], [0, 0, 4, 3, 2, 4, 3, 0, 4, 1, 2, 2], [4, 4, 0, 0, 4, 0, 3, 3, 3, 0, 2, 2], [4, 1, 2, 1, 1, 0, 4, 2, 0, 3, 2, 2], [3, 4, 0, 2, 4, 2, 3, 2, 0, 3, 2, 2], [3, 0, 3, 4, 4, 1, 3, 2, 0, 2, 2, 2], [3, 2, 1, 0, 1, 3, 3, 4, 4, 3, 2, 2], [3, 1, 1, 2, 4, 0, 3, 0, 1, 1, 2, 2], [1, 1, 0, 0, 2, 0, 0, 3, 2, 3, 2, 2], [3, 2, 2, 1, 3, 0, 0, 3, 1, 2, 2, 2], [0, 4, 4, 0, 1, 4, 3, 4, 3, 0, 2, 2], [1, 3, 2, 3, 0, 3, 2, 1, 0, 0, 2, 2], [2, 0, 1, 1, 0, 1, 2, 3, 4, 2, 2, 2], [0, 2, 1, 0, 3, 3, 1, 1, 0, 0, 2, 2], [1, 1, 0, 0, 1, 0, 0, 3, 3, 4, 2, 2], [1, 4, 4, 4, 0, 2, 2, 1, 3, 4, 2, 2], [1, 2, 3, 1, 4, 4, 4, 3, 0, 0, 2, 2], [1, 1, 4, 3, 2, 1, 3, 3, 0, 4, 2, 2], [3, 3, 3, 2, 0, 3, 4, 2, 4, 1, 2, 2], [4, 3, 1, 3, 3, 0, 4, 1, 0, 2, 2, 2], [4, 2, 3, 4, 4, 1, 1, 4, 0, 1, 2, 2], [4, 3, 1, 4, 1, 0, 4, 4, 1, 2, 2, 2], [3, 3, 0, 1, 1, 4, 0, 2, 2, 4, 2, 2], [2, 0, 3, 4, 3, 3, 2, 1, 0, 0, 2, 2], [3, 0, 3, 4, 0, 3, 2, 1, 2, 0, 2, 2], [4, 3, 1, 0, 3, 0, 3, 4, 3, 3, 2, 2], [1, 0, 2, 1, 4, 3, 3, 4, 4, 1, 2, 2], [1, 3, 3, 1, 1, 0, 0, 3, 1, 2, 2, 2], [3, 2, 2, 3, 2, 4, 3, 1, 0, 1, 2, 2], [0, 1, 0, 2, 0, 0, 1, 4, 4, 1, 2, 2], [1, 2, 2, 3, 3, 4, 1, 1, 3, 2, 2, 2], [0, 3, 2, 4, 3, 0, 4, 4, 2, 1, 2, 2], [2, 3, 2, 4, 3, 3, 0, 0, 0, 4, 2, 2], [2, 1, 0, 0, 1, 1, 1, 4, 3, 4, 2, 2], [1, 0, 2, 3, 0, 4, 4, 0, 1, 4, 2, 2], [0, 0, 0, 4, 4, 4, 1, 4, 2, 4, 2, 2], [3, 1, 1, 4, 1, 0, 4, 2, 2, 0, 2, 2], [3, 2, 4, 4, 2, 4, 3, 4, 0, 1, 2, 2], [1, 0, 2, 4, 0, 0, 4, 1, 1, 3, 2, 2], [4, 3, 2, 3, 3, 2, 3, 0, 1, 2, 2, 2], [1, 0, 2, 4, 3, 2, 2, 1, 4, 4, 2, 2], [4, 4, 0, 4, 0, 2, 4, 3, 1, 3, 2, 2], [0, 2, 3, 4, 4, 0, 2, 1, 2, 4, 2, 2], [0, 0, 4, 3, 4, 0, 4, 2, 4, 1, 2, 2], [1, 3, 3, 1, 4, 1, 0, 4, 4, 2, 2, 2], [3, 1, 2, 3, 4, 4, 3, 4, 3, 2, 2, 2], [0, 3, 1, 4, 0, 0, 3, 3, 3, 2, 2, 2], [3, 4, 4, 2, 4, 3, 1, 3, 2, 1, 2, 2], [0, 2, 2, 3, 3, 3, 2, 1, 1, 3, 2, 2], [1, 3, 0, 3, 1, 0, 3, 2, 3, 4, 2, 2], [0, 2, 0, 0, 3, 0, 4, 0, 4, 3, 2, 2], [4, 4, 2, 3, 4, 1, 3, 2, 0, 0, 2, 2], [1, 2, 0, 4, 4, 3, 3, 3, 1, 0, 2, 2], [0, 1, 3, 3, 4, 3, 4, 0, 2, 1, 2, 2], [0, 4, 4, 1, 1, 1, 4, 2, 1, 0, 2, 2], [1, 0, 4, 1, 4, 0, 4, 2, 3, 3, 2, 2], [3, 2, 2, 0, 0, 1, 2, 1, 4, 4, 2, 2], [1, 3, 4, 2, 2, 3, 3, 2, 0, 1, 2, 2], [0, 0, 3, 4, 2, 3, 0, 2, 2, 1, 2, 2], [2, 1, 0, 4, 0, 0, 0, 3, 4, 2, 2, 2], [1, 4, 4, 4, 0, 3, 2, 4, 3, 0, 2, 2], [0, 1, 3, 4, 4, 2, 1, 4, 4, 4, 2, 2], [3, 0, 0, 0, 4, 0, 1, 3, 2, 1, 2, 2], [2, 3, 2, 4, 1, 2, 1, 0, 2, 0, 2, 2], [3, 4, 2, 0, 0, 3, 1, 2, 1, 1, 2, 2], [0, 2, 1, 1, 2, 1, 4, 1, 3, 4, 2, 2], [3, 0, 4, 2, 0, 1, 3, 4, 0, 4, 2, 2], [0, 3, 3, 1, 0, 1, 1, 1, 0, 0, 2, 2], [1, 0, 2, 4, 0, 3, 2, 0, 2, 3, 2, 2], [0, 3, 0, 4, 3, 1, 4, 3, 3, 4, 2, 2], [4, 2, 3, 0, 2, 1, 0, 3, 4, 4, 2, 2], [3, 3, 0, 0, 3, 0, 3, 4, 0, 4, 2, 2], [0, 1, 4, 4, 1, 3, 3, 4, 1, 2, 2, 2], [0, 4, 3, 3, 0, 1, 1, 4, 0, 0, 2, 2], [0, 1, 1, 0, 3, 4, 0, 3, 0, 2, 2, 2], [1, 4, 0, 4, 4, 4, 3, 2, 2, 4, 2, 2], [4, 0, 4, 1, 1, 4, 2, 1, 1, 2, 2, 2], [1, 4, 1, 0, 4, 4, 0, 3, 2, 0, 2, 2], [4, 3, 4, 0, 3, 3, 4, 4, 0, 3, 2, 2], [3, 4, 1, 1, 1, 4, 3, 3, 4, 4, 2, 2], [0, 2, 1, 4, 1, 1, 1, 0, 4, 2, 2, 2], [4, 3, 2, 0, 4, 1, 1, 2, 1, 1, 2, 2], [0, 2, 4, 2, 2, 1, 1, 1, 1, 0, 2, 2], [3, 4, 0, 0, 3, 3, 3, 0, 4, 4, 2, 2], [0, 3, 4, 4, 4, 0, 1, 0, 0, 4, 2, 2], [3, 4, 1, 4, 1, 2, 1, 0, 4, 4, 2, 2], [1, 1, 2, 3, 1, 2, 4, 1, 4, 3, 2, 2], [4, 3, 4, 0, 2, 0, 3, 4, 2, 3, 2, 2], [1, 4, 2, 0, 0, 4, 2, 1, 1, 3, 2, 2], [0, 1, 3, 1, 2, 0, 1, 0, 4, 2, 2, 2], [2, 0, 4, 4, 2, 4, 3, 0, 1, 2, 2, 2], [3, 4, 0, 3, 0, 2, 1, 4, 4, 1, 2, 2], [4, 0, 2, 4, 1, 0, 3, 3, 3, 4, 2, 2], [3, 3, 1, 4, 4, 0, 3, 0, 2, 0, 2, 2], [0, 3, 3, 0, 1, 3, 1, 4, 2, 3, 2, 2], [1, 4, 3, 0, 0, 3, 2, 4, 1, 2, 2, 2], [4, 4, 4, 3, 1, 2, 3, 3, 3, 0, 2, 2], [2, 3, 4, 1, 2, 4, 1, 2, 3, 1, 2, 2], [2, 4, 4, 2, 1, 4, 0, 2, 0, 3, 2, 2], [4, 1, 1, 1, 0, 0, 0, 4, 3, 0, 2, 2], [0, 4, 2, 1, 4, 2, 1, 0, 4, 0, 2, 2], [3, 0, 2, 1, 3, 1, 4, 4, 4, 3, 2, 2], [2, 4, 3, 2, 0, 4, 1, 3, 0, 3, 2, 2], [2, 4, 1, 2, 4, 0, 4, 4, 0, 3, 2, 2], [2, 0, 3, 3, 3, 4, 1, 3, 2, 3, 2, 2], [1, 3, 0, 1, 3, 2, 2, 0, 2, 3, 2, 2], [0, 1, 2, 1, 4, 4, 3, 3, 1, 2, 2, 2], [4, 0, 0, 4, 3, 2, 1, 2, 2, 4, 2, 2], [0, 3, 4, 4, 1, 3, 3, 2, 1, 1, 2, 2], [4, 0, 3, 3, 2, 3, 1, 1, 4, 3, 2, 2], [4, 3, 2, 4, 2, 0, 4, 2, 3, 0, 2, 2], [3, 1, 3, 0, 1, 2, 4, 0, 2, 3, 2, 2], [0, 4, 0, 3, 3, 1, 1, 1, 4, 4, 2, 2], [3, 3, 0, 4, 0, 2, 4, 1, 0, 0, 2, 2], [3, 3, 1, 4, 2, 0, 2, 1, 1, 0, 2, 2], [0, 2, 1, 2, 4, 4, 1, 4, 4, 0, 2, 2], [1, 0, 3, 3, 0, 3, 0, 4, 3, 2, 2, 2], [1, 3, 3, 3, 0, 1, 3, 1, 3, 0, 2, 2], [3, 3, 1, 2, 0, 1, 1, 0, 2, 1, 2, 2], [0, 4, 4, 3, 2, 4, 4, 1, 4, 4, 2, 2], [0, 2, 0, 0, 3, 4, 3, 1, 4, 3, 2, 2], [0, 1, 1, 0, 1, 4, 0, 3, 4, 3, 2, 2], [3, 0, 4, 4, 0, 2, 1, 1, 1, 2, 2, 2], [2, 0, 3, 2, 4, 4, 2, 4, 4, 3, 2, 2], [2, 0, 3, 0, 1, 0, 1, 1, 0, 0, 2, 2], [2, 1, 1, 2, 0, 1, 3, 1, 3, 4, 2, 2], [1, 2, 3, 2, 0, 2, 0, 0, 3, 0, 2, 2], [2, 1, 0, 4, 3, 1, 3, 2, 1, 2, 2, 2], [0, 0, 1, 3, 3, 1, 0, 1, 4, 4, 2, 2], [1, 1, 2, 0, 2, 4, 0, 0, 3, 4, 2, 2], [4, 0, 1, 3, 3, 0, 2, 1, 1, 0, 2, 2], [1, 4, 1, 2, 4, 4, 3, 0, 4, 3, 2, 2], [0, 2, 2, 1, 0, 0, 2, 0, 3, 2, 2, 2], [4, 3, 2, 3, 0, 1, 0, 2, 2, 4, 2, 2], [4, 3, 0, 1, 2, 3, 0, 4, 4, 2, 2, 2], [4, 2, 3, 0, 2, 0, 2, 4, 0, 3, 2, 2], [1, 2, 0, 1, 0, 3, 4, 4, 3, 4, 2, 2], [1, 1, 4, 3, 2, 0, 2, 3, 4, 0, 2, 2], [2, 4, 3, 2, 0, 1, 1, 0, 2, 0, 2, 2], [1, 3, 0, 4, 4, 0, 3, 3, 4, 1, 2, 2], [3, 3, 4, 0, 0, 0, 1, 4, 4, 3, 2, 2], [0, 2, 2, 4, 4, 1, 0, 0, 4, 3, 2, 2], [0, 0, 4, 2, 4, 4, 4, 3, 3, 4, 2, 2], [2, 1, 4, 0, 0, 0, 1, 3, 2, 0, 2, 2], [0, 3, 1, 3, 3, 1, 4, 3, 2, 4, 2, 2], [4, 4, 4, 2, 1, 3, 2, 1, 3, 3, 2, 2], [4, 1, 0, 4, 4, 4, 3, 2, 2, 4, 2, 2], [0, 1, 4, 2, 2, 1, 4, 0, 1, 3, 2, 2], [1, 2, 0, 2, 2, 3, 3, 3, 4, 2, 2, 2], [0, 3, 2, 1, 3, 4, 3, 0, 4, 3, 2, 2], [3, 3, 3, 4, 4, 4, 1, 1, 0, 3, 2, 2], [1, 2, 2, 3, 2, 4, 1, 1, 4, 0, 2, 2], [1, 2, 4, 3, 2, 1, 0, 1, 4, 4, 2, 2], [0, 3, 3, 3, 3, 4, 0, 2, 4, 2, 2, 2], [0, 0, 0, 1, 2, 4, 3, 2, 1, 0, 2, 2], [2, 1, 4, 3, 3, 2, 3, 3, 2, 4, 2, 2], [4, 3, 2, 1, 1, 3, 0, 4, 0, 3, 2, 2], [3, 0, 2, 3, 2, 4, 1, 0, 1, 3, 2, 2], [3, 1, 3, 4, 1, 3, 2, 4, 2, 0, 2, 2], [0, 4, 4, 0, 0, 3, 4, 2, 3, 2, 2, 2], [2, 0, 1, 2, 1, 4, 1, 1, 1, 3, 2, 2], [3, 1, 3, 2, 0, 4, 0, 2, 1, 4, 2, 2], [4, 4, 0, 3, 0, 2, 2, 0, 0, 4, 2, 2], [4, 1, 4, 2, 0, 1, 3, 0, 2, 3, 2, 2], [1, 4, 2, 4, 3, 1, 1, 2, 1, 0, 2, 2], [1, 2, 4, 0, 1, 3, 1, 0, 3, 1, 2, 2], [1, 2, 1, 4, 0, 3, 3, 3, 3, 0, 2, 2], [0, 2, 2, 3, 0, 0, 1, 2, 0, 3, 2, 2], [1, 4, 0, 2, 1, 1, 4, 2, 2, 1, 2, 2], [1, 3, 2, 3, 4, 0, 3, 3, 1, 4, 2, 2], [3, 2, 2, 1, 3, 4, 2, 3, 4, 4, 2, 2], [2, 4, 4, 0, 1, 4, 4, 3, 3, 1, 2, 2], [1, 1, 1, 3, 2, 1, 3, 4, 2, 3, 2, 2], [3, 4, 4, 4, 0, 1, 1, 3, 0, 4, 2, 2], [3, 1, 2, 4, 1, 4, 2, 3, 4, 0, 2, 2], [0, 4, 3, 3, 2, 4, 4, 0, 2, 3, 2, 2], [2, 3, 2, 0, 3, 2, 4, 1, 0, 2, 2, 2], [3, 2, 1, 4, 4, 1, 0, 2, 1, 2, 2, 2], [2, 3, 2, 0, 4, 2, 3, 4, 3, 0, 2, 2], [1, 1, 3, 0, 3, 3, 0, 1, 2, 3, 2, 2], [1, 3, 4, 1, 0, 1, 2, 1, 4, 0, 2, 2], [3, 4, 3, 1, 1, 3, 4, 4, 2, 0, 2, 2], [0, 0, 3, 2, 3, 4, 2, 4, 3, 1, 2, 2], [1, 0, 2, 0, 4, 0, 4, 2, 0, 2, 2, 2], [3, 0, 4, 1, 0, 4, 0, 1, 1, 3, 2, 2], [0, 1, 0, 0, 3, 2, 4, 1, 1, 0, 2, 2], [1, 3, 3, 0, 4, 0, 4, 2, 0, 4, 2, 2], [4, 4, 1, 2, 4, 0, 0, 2, 3, 3, 2, 2], [2, 4, 0, 0, 4, 4, 3, 1, 1, 4, 2, 2], [1, 2, 4, 2, 2, 0, 4, 4, 2, 3, 2, 2], [0, 1, 3, 4, 2, 0, 1, 0, 2, 1, 2, 2], [0, 4, 0, 2, 3, 0, 1, 2, 3, 1, 2, 2], [2, 1, 1, 1, 4, 1, 3, 3, 0, 0, 2, 2], [1, 2, 0, 0, 3, 3, 1, 3, 0, 2, 2, 2], [0, 2, 2, 4, 1, 0, 4, 1, 2, 1, 2, 2], [4, 3, 3, 2, 1, 4, 2, 4, 2, 1, 2, 2], [0, 0, 3, 4, 1, 4, 2, 1, 0, 1, 2, 2], [3, 2, 3, 0, 2, 3, 2, 4, 0, 1, 2, 2], [2, 3, 4, 0, 1, 4, 3, 0, 0, 3, 2, 2], [3, 4, 0, 4, 1, 4, 1, 0, 0, 2, 2, 2], [3, 4, 1, 3, 0, 1, 3, 3, 2, 4, 2, 2], [2, 1, 1, 2, 0, 0, 1, 4, 4, 4, 2, 2], [1, 2, 0, 1, 4, 4, 1, 4, 4, 1, 2, 2], [0, 2, 2, 3, 4, 4, 0, 4, 3, 1, 2, 2], [3, 4, 4, 4, 0, 4, 0, 1, 2, 3, 2, 2], [1, 3, 4, 2, 0, 3, 2, 0, 4, 3, 2, 2], [0, 1, 0, 2, 1, 1, 4, 0, 1, 3, 2, 2], [2, 1, 1, 2, 0, 3, 1, 4, 3, 4, 2, 2], [0, 0, 2, 0, 4, 3, 0, 4, 0, 3, 2, 2], [0, 2, 0, 0, 2, 4, 1, 3, 4, 0, 2, 2], [0, 2, 1, 4, 3, 3, 4, 2, 0, 4, 2, 2], [0, 2, 4, 0, 3, 4, 1, 4, 3, 2, 2, 2], [0, 2, 4, 3, 3, 4, 1, 4, 3, 2, 2, 2], [0, 4, 1, 4, 1, 2, 4, 4, 4, 1, 2, 2], [4, 1, 2, 0, 2, 1, 4, 0, 1, 4, 2, 2], [2, 1, 1, 2, 3, 4, 2, 3, 0, 3, 2, 2], [4, 1, 0, 4, 2, 3, 4, 0, 4, 2, 2, 2], [1, 4, 1, 0, 1, 2, 4, 4, 2, 0, 2, 2], [0, 4, 2, 0, 4, 3, 3, 2, 3, 0, 2, 2], [4, 3, 3, 2, 4, 0, 1, 1, 3, 4, 2, 2], [3, 2, 4, 2, 3, 4, 2, 1, 3, 1, 2, 2], [2, 4, 4, 3, 4, 1, 4, 2, 0, 1, 2, 2], [3, 4, 3, 0, 0, 3, 4, 1, 4, 4, 2, 2], [1, 1, 4, 3, 4, 4, 2, 4, 0, 4, 2, 2], [1, 3, 2, 4, 0, 0, 0, 2, 1, 4, 2, 2], [1, 4, 0, 4, 3, 2, 3, 1, 0, 3, 2, 2], [1, 1, 4, 1, 0, 0, 3, 4, 0, 2, 2, 2], [3, 4, 3, 2, 0, 4, 0, 3, 3, 0, 2, 2], [1, 4, 4, 4, 1, 1, 3, 4, 3, 3, 2, 2], [0, 2, 0, 1, 1, 1, 1, 4, 1, 0, 2, 2], [1, 2, 3, 4, 0, 0, 3, 3, 0, 1, 2, 2], [0, 4, 0, 0, 4, 4, 2, 0, 3, 2, 2, 2], [4, 4, 1, 4, 3, 0, 4, 3, 0, 1, 2, 2], [0, 3, 3, 3, 1, 3, 2, 0, 1, 4, 2, 2], [4, 2, 0, 1, 3, 0, 2, 3, 1, 3, 2, 2], [2, 0, 0, 1, 4, 0, 1, 2, 0, 2, 2, 2], [3, 0, 0, 1, 4, 2, 0, 2, 2, 3, 2, 2], [0, 2, 3, 4, 1, 2, 0, 3, 1, 3, 2, 2], [2, 1, 0, 4, 1, 2, 3, 4, 2, 3, 2, 2], [0, 0, 3, 1, 3, 4, 2, 4, 4, 0, 2, 2], [0, 1, 4, 4, 3, 1, 1, 0, 4, 1, 2, 2], [3, 1, 0, 2, 0, 0, 3, 3, 4, 0, 2, 2], [4, 0, 0, 4, 4, 1, 0, 3, 3, 4, 2, 2], [4, 0, 4, 1, 3, 1, 3, 0, 0, 3, 2, 2], [0, 1, 4, 1, 2, 0, 2, 4, 0, 2, 2, 2], [2, 1, 0, 0, 1, 0, 2, 0, 3, 0, 2, 2], [3, 0, 1, 2, 4, 1, 2, 1, 1, 1, 2, 2], [4, 1, 2, 0, 4, 4, 0, 1, 2, 3, 2, 2], [2, 1, 1, 2, 0, 4, 4, 1, 1, 4, 2, 2], [2, 1, 4, 0, 3, 4, 2, 3, 2, 0, 2, 2], [0, 4, 3, 4, 4, 1, 4, 4, 1, 0, 2, 2], [1, 3, 2, 0, 0, 1, 4, 1, 0, 2, 2, 2], [4, 0, 0, 0, 1, 2, 3, 3, 3, 4, 2, 2], [3, 0, 3, 2, 2, 3, 1, 3, 1, 0, 2, 2], [0, 2, 3, 4, 4, 0, 0, 3, 1, 2, 2, 2], [4, 1, 3, 2, 1, 1, 3, 1, 4, 4, 2, 2], [1, 3, 0, 1, 0, 4, 2, 3, 1, 4, 2, 2], [3, 0, 1, 2, 2, 3, 0, 4, 0, 1, 2, 2], [2, 0, 4, 1, 3, 0, 1, 4, 1, 1, 2, 2], [1, 2, 1, 4, 2, 4, 3, 0, 2, 1, 2, 2], [0, 2, 0, 1, 2, 0, 4, 3, 1, 1, 2, 2], [3, 3, 0, 3, 1, 3, 0, 0, 2, 1, 2, 2], [1, 0, 0, 3, 3, 1, 4, 2, 2, 1, 2, 2], [3, 3, 4, 2, 3, 0, 4, 3, 4, 0, 2, 2], [4, 0, 3, 3, 4, 4, 0, 3, 4, 3, 2, 2], [2, 3, 3, 0, 4, 3, 3, 4, 3, 3, 2, 2], [0, 1, 2, 0, 1, 3, 4, 0, 4, 3, 2, 2], [4, 0, 3, 4, 0, 1, 2, 1, 1, 2, 2, 2], [0, 4, 3, 4, 1, 0, 1, 4, 1, 3, 2, 2], [4, 0, 0, 3, 1, 0, 4, 4, 2, 0, 2, 2], [3, 4, 0, 0, 0, 2, 4, 1, 1, 0, 2, 2], [3, 0, 1, 1, 4, 4, 4, 0, 3, 1, 2, 2], [3, 2, 3, 3, 0, 3, 4, 3, 1, 1, 2, 2], [1, 4, 1, 0, 3, 1, 4, 2, 2, 0, 2, 2], [4, 1, 3, 4, 0, 2, 1, 0, 2, 4, 2, 2], [0, 3, 1, 4, 1, 2, 4, 0, 4, 4, 2, 2], [1, 1, 1, 0, 1, 3, 1, 4, 0, 3, 2, 2], [3, 0, 2, 1, 3, 4, 1, 0, 1, 3, 2, 2], [1, 3, 2, 0, 3, 3, 4, 0, 2, 3, 2, 2], [0, 0, 2, 1, 3, 4, 3, 3, 2, 3, 2, 2], [3, 4, 1, 2, 0, 1, 3, 0, 4, 1, 2, 2], [1, 1, 2, 4, 1, 4, 1, 2, 0, 4, 2, 2], [0, 4, 0, 3, 4, 1, 4, 2, 0, 0, 2, 2], [1, 0, 4, 4, 3, 4, 3, 1, 0, 1, 2, 2], [1, 1, 4, 3, 0, 4, 0, 1, 2, 1, 2, 2], [1, 0, 0, 4, 0, 2, 4, 4, 2, 3, 2, 2], [2, 4, 4, 2, 3, 0, 3, 2, 1, 4, 2, 2], [1, 3, 3, 2, 2, 0, 4, 0, 0, 3, 2, 2], [3, 3, 1, 4, 0, 4, 0, 1, 4, 4, 2, 2], [4, 2, 1, 3, 0, 0, 0, 3, 4, 3, 2, 2], [3, 3, 3, 2, 1, 2, 4, 3, 1, 1, 2, 2], [1, 1, 4, 4, 1, 3, 4, 3, 2, 0, 2, 2], [4, 3, 0, 3, 4, 0, 1, 0, 3, 3, 2, 2], [2, 3, 0, 4, 2, 4, 2, 1, 3, 2, 2, 2], [3, 2, 4, 2, 1, 4, 3, 0, 1, 1, 2, 2], [2, 3, 0, 1, 2, 0, 0, 4, 2, 4, 2, 2], [0, 3, 0, 2, 1, 1, 1, 0, 1, 2, 2, 2], [4, 4, 0, 2, 2, 4, 0, 4, 4, 0, 2, 2], [3, 3, 2, 3, 4, 2, 4, 3, 3, 2, 2, 2], [2, 1, 1, 3, 4, 2, 2, 4, 4, 1, 2, 2], [1, 1, 3, 3, 0, 4, 4, 1, 1, 2, 2, 2], [2, 1, 2, 4, 0, 0, 4, 4, 1, 2, 2, 2], [0, 4, 0, 2, 0, 3, 1, 0, 4, 4, 2, 2], [3, 1, 4, 0, 1, 3, 4, 2, 0, 2, 2, 2], [0, 3, 1, 1, 4, 4, 3, 1, 0, 1, 2, 2], [0, 2, 3, 1, 1, 3, 3, 2, 2, 1, 2, 2], [2, 0, 0, 3, 2, 1, 4, 2, 1, 1, 2, 2], [3, 4, 1, 1, 2, 4, 4, 1, 3, 2, 2, 2], [2, 3, 0, 2, 4, 0, 4, 3, 1, 3, 2, 2], [2, 0, 0, 2, 0, 1, 3, 0, 0, 3, 2, 2], [3, 1, 4, 3, 4, 1, 2, 1, 0, 3, 2, 2], [2, 0, 1, 0, 0, 4, 1, 4, 4, 1, 2, 2], [0, 3, 2, 4, 1, 3, 4, 2, 3, 3, 2, 2], [1, 0, 2, 4, 3, 0, 4, 1, 2, 0, 2, 2], [4, 4, 2, 1, 2, 0, 2, 4, 3, 0, 2, 2], [3, 1, 1, 1, 1, 4, 0, 0, 1, 3, 2, 2], [1, 1, 3, 3, 3, 0, 2, 1, 4, 3, 2, 2], [0, 1, 4, 4, 1, 4, 2, 1, 4, 0, 2, 2], [1, 2, 0, 2, 3, 3, 0, 0, 1, 1, 2, 2], [1, 1, 4, 3, 1, 0, 4, 4, 3, 3, 2, 2], [3, 0, 3, 1, 0, 3, 1, 3, 0, 4, 2, 2], [2, 1, 1, 0, 0, 1, 2, 3, 4, 1, 2, 2], [4, 2, 1, 3, 2, 4, 2, 0, 0, 3, 2, 2], [2, 4, 0, 3, 1, 4, 0, 1, 1, 3, 2, 2], [2, 0, 4, 4, 0, 0, 4, 0, 3, 4, 2, 2], [1, 3, 4, 1, 4, 2, 3, 3, 1, 4, 2, 2], [1, 2, 1, 1, 1, 0, 1, 4, 0, 1, 2, 2], [2, 0, 4, 1, 0, 3, 0, 4, 0, 0, 2, 2], [2, 3, 3, 0, 2, 4, 1, 2, 3, 1, 2, 2], [3, 2, 4, 0, 1, 0, 3, 4, 3, 1, 2, 2], [4, 0, 3, 0, 2, 1, 2, 0, 0, 2, 2, 2], [3, 4, 4, 3, 0, 3, 0, 2, 1, 4, 2, 2], [4, 2, 0, 1, 3, 1, 3, 4, 0, 3, 2, 2], [3, 2, 4, 2, 1, 3, 2, 0, 2, 4, 2, 2], [4, 1, 4, 0, 1, 4, 1, 2, 4, 4, 2, 2], [2, 0, 0, 0, 2, 1, 0, 4, 1, 3, 2, 2], [1, 1, 1, 0, 1, 2, 2, 4, 0, 2, 2, 2], [3, 0, 0, 2, 1, 1, 4, 1, 2, 0, 2, 2], [4, 2, 0, 0, 4, 4, 1, 2, 1, 0, 2, 2], [3, 3, 2, 0, 3, 1, 2, 1, 2, 4, 2, 2], [3, 3, 0, 1, 0, 3, 3, 1, 2, 1, 2, 2], [0, 1, 0, 3, 3, 3, 3, 0, 0, 0, 2, 2], [3, 1, 0, 3, 1, 0, 1, 4, 2, 3, 2, 2], [4, 1, 0, 3, 0, 4, 0, 0, 3, 2, 2, 2], [4, 0, 1, 2, 3, 1, 2, 1, 2, 4, 2, 2], [3, 0, 4, 0, 3, 2, 2, 0, 0, 0, 2, 2], [1, 1, 0, 2, 1, 3, 1, 0, 4, 4, 2, 2], [0, 1, 4, 4, 3, 2, 1, 2, 4, 1, 2, 2], [2, 4, 1, 2, 0, 3, 0, 1, 2, 0, 2, 2], [0, 1, 4, 0, 0, 2, 0, 3, 2, 3, 2, 2], [4, 4, 3, 4, 2, 4, 2, 1, 0, 3, 2, 2], [3, 0, 3, 1, 4, 4, 1, 3, 4, 0, 2, 2], [1, 0, 2, 1, 4, 3, 2, 4, 2, 0, 2, 2], [3, 4, 0, 3, 0, 0, 2, 4, 1, 3, 2, 2], [2, 1, 0, 4, 3, 1, 2, 4, 4, 1, 2, 2], [2, 1, 2, 4, 2, 3, 1, 3, 4, 1, 2, 2], [3, 3, 4, 0, 4, 4, 0, 1, 1, 3, 2, 2], [1, 0, 3, 4, 3, 1, 2, 1, 0, 4, 2, 2], [2, 1, 2, 4, 1, 1, 4, 3, 0, 3, 2, 2]]
    for episode in range(1000):

        #————initialize the learning————
        total_reward = [0 for i in range(0,AgentNUM)]

        ll = ans[episode][:]
        state = []
        for i in range (0,AgentNUM):
            blank_map=[[0 for i in range (0,5)] for j in range(0,5)]
            blank_map[2][2] = 9
            for j in range(0,AgentNUM):
                if i==j:
                    blank_map[ll[j*2]][ll[j*2+1]] = 6
                else:
                    blank_map[ll[j*2]][ll[j*2+1]] = 3
            line_map=np.reshape(blank_map,(1,25))[0].tolist()
            state.append(line_map[:])

        '''
        for i in range (0,4):
            for j in range (0,i)
                state[i]= state[i]+[0]
        '''      

        #————scheduling for each step————
        for step in range (STEP):

            #————deep reinceforement learning scheduling————
            last_state = state[:]
            reward = [0 for i in range(0,AgentNUM)]
            action = [0 for i in range(0,AgentNUM+1)]
            x = [0 for i in range(0,AgentNUM+1)]
            y = [0 for i in range(0,AgentNUM+1)]
            
            for i in range(0,AgentNUM):
                for j in range(0,25):
                    if state[i][j]==6:
                        x[i]=j//5
                        y[i]=j%5
            x[AgentNUM] = 2
            y[AgentNUM] = 2
            
            exp_map=[[0 for i in range (0,5)] for j in range(0,5)]
            for i in range (0,AgentNUM):
                exp_map[x[i]][y[i]] = i+1
            
            #依次按照顺序猎人和猎物进行运动
            for i in range(0,AgentNUM+1):

                # 猎物最后行动且是随机的，前面的四个猎人有预测的成分在
                if i<AgentNUM:
                    action[i] = agent[i].get_greedy_action(state[i])
                else:
                    done, action[i] = sto_run(exp_map, x[i], y[i])
                    
                #1 north, 2 east, 3 south, 4 west, 0 stay
                x_exp = x[i]
                y_exp = y[i]
                if action[i]==1:
                    x_exp=(x_exp+4)%5
                if action[i]==2:
                    y_exp=(y_exp+1)%5
                if action[i]==3:
                    x_exp=(x_exp+1)%5
                if action[i]==4:
                    y_exp=(y_exp+4)%5

                #no colision 没冲撞其他人则行动，有冲撞就停留在原地
                if exp_map[x_exp][y_exp]==0:  
                    exp_map[x[i]][y[i]]=0
                    x[i] = x_exp
                    y[i] = y_exp
                    exp_map[x[i]][y[i]]=i+1
                elif (i<AgentNUM)and(exp_map[x_exp][y_exp]!=AgentNUM):
                    reward[i]=-10
            
            #agent根据行动后局势给出reward和新的state，进行训练
            for i in range(0,AgentNUM):

                if done:  # 如果猎物没地方去了
                    reward[i] = 500
                else:
                    #用的曼哈顿距离给出reward，离得越近reward越大
                    reward[i] +=  - min((x[i]-x[AgentNUM]+5)%5,(x[AgentNUM]-x[i]+5)%5) - min((y[i]-y[AgentNUM]+5)%5,(y[AgentNUM]-y[i]+5)%5)
                total_reward[i] = total_reward[i]*GAMMA + reward[i]

                state[i] = np.reshape(exp_map[:],(1,25))[0].tolist()
                #print(np.reshape(exp_map[:],(1,25))[0].tolist())
                for j in range(0,25):
                    if state[i][j]==AgentNUM+1:
                        state[i][j]=9
                    elif state[i][j]==i+1:
                        state[i][j]=6
                    elif (state[i][j]!=i+1)and(state[i][j]>0):
                        state[i][j]=3

            if done:
                break
            #print(last_state[0],action, state[0], reward)
        step_list.append(step)
        #print(episode)
    g = open("attempt_test.txt", "a")
    g.write("%s"%'this episode: ' + str(episode_now) + ' mean: ' + str(np.mean(step_list)) + ' std: ' + str(np.std(step_list)) + "\n")
    g.close()
    if np.mean(step_list)<mean_best:
        mean_best = np.mean(step_list)
        print(mean_best)
        print('episode_now: ',episode_now)
        for i in range(0,AgentNUM):
            agent[i].saver.save(agent[i].sess, 'model_best_5N1_'+str(i))

def main():

    
    agent = [DQN() for i in range(0,AgentNUM)]
    for i in range (0,AgentNUM):
        agent[i].model_dir = 'model_'+str(i)
        agent[i].optimizer_dir = 'optimizer_'+str(i)
        agent[i].epsilon = FINAL_EPSILON
    for i in range (0,AgentNUM-1):
            agent[i].saver.restore(agent[i].sess, 'model_best_'+str(i))  
    agent[AgentNUM-1].saver.restore(agent[AgentNUM-1].sess, 'model_best_'+str(AgentNUM-2))
    


    # agent1.model_load(path_to_ckpt_meta_1, path_to_ckpt_data_2)
    # agent2.model_load(path_to_ckpt_meta_1, path_to_ckpt_data_2)

    #————Deep Q-Learning Iteration————

    for episode in range(EPISODE):

        #————initialize the learning————
        total_reward = [0 for i in range(0,AgentNUM)]

        ll = map_inital()
        state = []
        for i in range (0,AgentNUM):
            blank_map=[[0 for i in range (0,5)] for j in range(0,5)]
            blank_map[2][2] = 9
            for j in range(0,AgentNUM):
                if i==j:
                    blank_map[ll[j*2]][ll[j*2+1]] = 6
                else:
                    blank_map[ll[j*2]][ll[j*2+1]] = 3
            line_map=np.reshape(blank_map,(1,25))[0].tolist()
            state.append(line_map[:])

        '''
        for i in range (0,4):
            for j in range (0,i)
                state[i]= state[i]+[0]
        '''      
        for i in range(0,AgentNUM):
            agent[i].epsilon -= agent[i].epsilon_step

        
        f = open("Persuit_learning2.txt", "a")

        #————scheduling for each step————
        for step in range (STEP):

            #————deep reinceforement learning scheduling————
            last_state = state[:]
            reward = [0 for i in range(0,AgentNUM)]
            action = [0 for i in range(0,AgentNUM+1)]
            x = [0 for i in range(0,AgentNUM+1)]
            y = [0 for i in range(0,AgentNUM+1)]
            
            for i in range(0,AgentNUM):
                for j in range(0,25):
                    if state[i][j]==6:
                        x[i]=j//5
                        y[i]=j%5
            x[AgentNUM] = 2
            y[AgentNUM] = 2
            
            exp_map=[[0 for i in range (0,5)] for j in range(0,5)]
            for i in range (0,AgentNUM):
                exp_map[x[i]][y[i]] = i+1
            
            #依次按照顺序猎人和猎物进行运动
            for i in range(0,AgentNUM+1):

                # 猎物最后行动且是随机的，前面的四个猎人有预测的成分在
                if i<AgentNUM:
                    action[i] = agent[i].get_action(state[i])
                else:
                    done, action[i] = sto_run(exp_map, x[i], y[i])
                    
                #1 north, 2 east, 3 south, 4 west, 0 stay
                x_exp = x[i]
                y_exp = y[i]
                if action[i]==1:
                    x_exp=(x_exp+4)%5
                if action[i]==2:
                    y_exp=(y_exp+1)%5
                if action[i]==3:
                    x_exp=(x_exp+1)%5
                if action[i]==4:
                    y_exp=(y_exp+4)%5

                #no colision 没冲撞其他人则行动，有冲撞就停留在原地
                if exp_map[x_exp][y_exp]==0:  
                    exp_map[x[i]][y[i]]=0
                    x[i] = x_exp
                    y[i] = y_exp
                    exp_map[x[i]][y[i]]=i+1
                elif (i<AgentNUM)and(exp_map[x_exp][y_exp]!=AgentNUM):
                    reward[i]=-10
            
            #agent根据行动后局势给出reward和新的state，进行训练
            for i in range(0,AgentNUM):

                if done:  # 如果猎物没地方去了
                    reward[i] = 500
                else:
                    #用的曼哈顿距离给出reward，离得越近reward越大
                    reward[i] +=  - min((x[i]-x[AgentNUM]+5)%5,(x[AgentNUM]-x[i]+5)%5) - min((y[i]-y[AgentNUM]+5)%5,(y[AgentNUM]-y[i]+5)%5)
                total_reward[i] = total_reward[i]*GAMMA + reward[i]

                state[i] = np.reshape(exp_map[:],(1,25))[0].tolist()
                #print(np.reshape(exp_map[:],(1,25))[0].tolist())
                for j in range(0,25):
                    if state[i][j]==AgentNUM+1:
                        state[i][j]=9
                    elif state[i][j]==i+1:
                        state[i][j]=6
                    elif (state[i][j]!=i+1)and(state[i][j]>0):
                        state[i][j]=3


                '''
                for j in range(0,i):
                    state[i] = state[i]+[action[j]]'''
                #print(state[i])

                agent[i].percieve( last_state[i], action[i], reward[i], state[i], done or(step == STEP - 1))
            if done:
                break
            #print(last_state[0],action, state[0], reward)
        print('this episode: ', episode, ' step: ', step, ' total reward: ', total_reward)
        f.write("%s"%'this episode: ' + str(episode) + ' step: ' + str(step) + ' total reward: ' + str(total_reward) + "\n")
        if episode%500==0:
            test_RL(agent,episode)
        #for i in range(0,AgentNUM):
        #    agent[i].saver.save(agent[i].sess, agent[i].model_dir)
    f.close()

if __name__ == "__main__":
    main()

            
            
        
